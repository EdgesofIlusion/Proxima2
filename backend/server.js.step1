require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const compression = require('compression');
const rateLimit = require('express-rate-limit');

const app = express();
const PORT = process.env.PORT || 3001;

// S‚curit‚
app.use(helmet());
app.use(cors({ origin: process.env.FRONTEND_URL || 'http://localhost:3000' }));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100
});
app.use(limiter);

// Middleware
app.use(compression());
app.use(morgan('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Routes existantes
app.get('/', (req, res) => {
  res.json({ message: 'Proxima Backend API', status: 'OK' });
});

app.get('/test-db', async (req, res) => {
  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    await prisma.$connect();
    res.json({ message: 'Base de donn‚es connect‚e !', status: 'PostgreSQL OK' });
    await prisma.$disconnect();
  } catch (error) {
    res.json({ message: 'Erreur', erreur: error.message });
  }
});

// Route sant‚
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    service: 'Proxima Backend'
  });
});

app.listen(PORT, () => {
  console.log(`?? Serveur Proxima sur port ${PORT}`);
});
