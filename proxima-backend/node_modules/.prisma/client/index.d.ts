
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Lieu
 * 
 */
export type Lieu = $Result.DefaultSelection<Prisma.$LieuPayload>
/**
 * Model Reservation
 * 
 */
export type Reservation = $Result.DefaultSelection<Prisma.$ReservationPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  LOCATAIRE: 'LOCATAIRE',
  PROPRIO: 'PROPRIO',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const LieuType: {
  INTERIEUR: 'INTERIEUR',
  EXTERIEUR: 'EXTERIEUR',
  HISTORIQUE: 'HISTORIQUE',
  MODERNE: 'MODERNE',
  NATUREL: 'NATUREL',
  URBAIN: 'URBAIN',
  STUDIO: 'STUDIO'
};

export type LieuType = (typeof LieuType)[keyof typeof LieuType]


export const LieuStatut: {
  EN_ATTENTE: 'EN_ATTENTE',
  APPROUVE: 'APPROUVE',
  REJETE: 'REJETE',
  SUSPENDU: 'SUSPENDU'
};

export type LieuStatut = (typeof LieuStatut)[keyof typeof LieuStatut]


export const ReservationStatut: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  IN_DISPUTE: 'IN_DISPUTE'
};

export type ReservationStatut = (typeof ReservationStatut)[keyof typeof ReservationStatut]


export const PaymentType: {
  ACOMPTE: 'ACOMPTE',
  SOLDE: 'SOLDE',
  CAUTION: 'CAUTION',
  REMBOURSEMENT: 'REMBOURSEMENT'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const PaymentStatut: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

export type PaymentStatut = (typeof PaymentStatut)[keyof typeof PaymentStatut]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type LieuType = $Enums.LieuType

export const LieuType: typeof $Enums.LieuType

export type LieuStatut = $Enums.LieuStatut

export const LieuStatut: typeof $Enums.LieuStatut

export type ReservationStatut = $Enums.ReservationStatut

export const ReservationStatut: typeof $Enums.ReservationStatut

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type PaymentStatut = $Enums.PaymentStatut

export const PaymentStatut: typeof $Enums.PaymentStatut

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lieu`: Exposes CRUD operations for the **Lieu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lieus
    * const lieus = await prisma.lieu.findMany()
    * ```
    */
  get lieu(): Prisma.LieuDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **Reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.ReservationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Lieu: 'Lieu',
    Reservation: 'Reservation',
    Payment: 'Payment',
    Review: 'Review'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "lieu" | "reservation" | "payment" | "review"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Lieu: {
        payload: Prisma.$LieuPayload<ExtArgs>
        fields: Prisma.LieuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LieuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LieuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>
          }
          findFirst: {
            args: Prisma.LieuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LieuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>
          }
          findMany: {
            args: Prisma.LieuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>[]
          }
          create: {
            args: Prisma.LieuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>
          }
          createMany: {
            args: Prisma.LieuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LieuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>[]
          }
          delete: {
            args: Prisma.LieuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>
          }
          update: {
            args: Prisma.LieuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>
          }
          deleteMany: {
            args: Prisma.LieuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LieuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LieuUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>[]
          }
          upsert: {
            args: Prisma.LieuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LieuPayload>
          }
          aggregate: {
            args: Prisma.LieuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLieu>
          }
          groupBy: {
            args: Prisma.LieuGroupByArgs<ExtArgs>
            result: $Utils.Optional<LieuGroupByOutputType>[]
          }
          count: {
            args: Prisma.LieuCountArgs<ExtArgs>
            result: $Utils.Optional<LieuCountAggregateOutputType> | number
          }
        }
      }
      Reservation: {
        payload: Prisma.$ReservationPayload<ExtArgs>
        fields: Prisma.ReservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findFirst: {
            args: Prisma.ReservationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findMany: {
            args: Prisma.ReservationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          create: {
            args: Prisma.ReservationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          createMany: {
            args: Prisma.ReservationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReservationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          delete: {
            args: Prisma.ReservationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          update: {
            args: Prisma.ReservationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          deleteMany: {
            args: Prisma.ReservationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReservationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReservationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          upsert: {
            args: Prisma.ReservationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          aggregate: {
            args: Prisma.ReservationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReservation>
          }
          groupBy: {
            args: Prisma.ReservationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReservationCountArgs<ExtArgs>
            result: $Utils.Optional<ReservationCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    lieu?: LieuOmit
    reservation?: ReservationOmit
    payment?: PaymentOmit
    review?: ReviewOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    lieux: number
    reservations: number
    reviews_donnees: number
    reviews_recues: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lieux?: boolean | UserCountOutputTypeCountLieuxArgs
    reservations?: boolean | UserCountOutputTypeCountReservationsArgs
    reviews_donnees?: boolean | UserCountOutputTypeCountReviews_donneesArgs
    reviews_recues?: boolean | UserCountOutputTypeCountReviews_recuesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLieuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LieuWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviews_donneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviews_recuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type LieuCountOutputType
   */

  export type LieuCountOutputType = {
    reservations: number
    reviews: number
  }

  export type LieuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | LieuCountOutputTypeCountReservationsArgs
    reviews?: boolean | LieuCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * LieuCountOutputType without action
   */
  export type LieuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LieuCountOutputType
     */
    select?: LieuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LieuCountOutputType without action
   */
  export type LieuCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }

  /**
   * LieuCountOutputType without action
   */
  export type LieuCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type ReservationCountOutputType
   */

  export type ReservationCountOutputType = {
    payments: number
  }

  export type ReservationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | ReservationCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationCountOutputType
     */
    select?: ReservationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    nom: string | null
    prenom: string | null
    telephone: string | null
    role: $Enums.UserRole | null
    verified: boolean | null
    active: boolean | null
    stripe_customer_id: string | null
    premium_until: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    nom: string | null
    prenom: string | null
    telephone: string | null
    role: $Enums.UserRole | null
    verified: boolean | null
    active: boolean | null
    stripe_customer_id: string | null
    premium_until: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    nom: number
    prenom: number
    telephone: number
    role: number
    verified: number
    active: number
    stripe_customer_id: number
    premium_until: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    nom?: true
    prenom?: true
    telephone?: true
    role?: true
    verified?: true
    active?: true
    stripe_customer_id?: true
    premium_until?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    nom?: true
    prenom?: true
    telephone?: true
    role?: true
    verified?: true
    active?: true
    stripe_customer_id?: true
    premium_until?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    nom?: true
    prenom?: true
    telephone?: true
    role?: true
    verified?: true
    active?: true
    stripe_customer_id?: true
    premium_until?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone: string | null
    role: $Enums.UserRole
    verified: boolean
    active: boolean
    stripe_customer_id: string | null
    premium_until: Date | null
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    role?: boolean
    verified?: boolean
    active?: boolean
    stripe_customer_id?: boolean
    premium_until?: boolean
    created_at?: boolean
    updated_at?: boolean
    lieux?: boolean | User$lieuxArgs<ExtArgs>
    reservations?: boolean | User$reservationsArgs<ExtArgs>
    reviews_donnees?: boolean | User$reviews_donneesArgs<ExtArgs>
    reviews_recues?: boolean | User$reviews_recuesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    role?: boolean
    verified?: boolean
    active?: boolean
    stripe_customer_id?: boolean
    premium_until?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    role?: boolean
    verified?: boolean
    active?: boolean
    stripe_customer_id?: boolean
    premium_until?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    nom?: boolean
    prenom?: boolean
    telephone?: boolean
    role?: boolean
    verified?: boolean
    active?: boolean
    stripe_customer_id?: boolean
    premium_until?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "nom" | "prenom" | "telephone" | "role" | "verified" | "active" | "stripe_customer_id" | "premium_until" | "created_at" | "updated_at", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lieux?: boolean | User$lieuxArgs<ExtArgs>
    reservations?: boolean | User$reservationsArgs<ExtArgs>
    reviews_donnees?: boolean | User$reviews_donneesArgs<ExtArgs>
    reviews_recues?: boolean | User$reviews_recuesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      lieux: Prisma.$LieuPayload<ExtArgs>[]
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
      reviews_donnees: Prisma.$ReviewPayload<ExtArgs>[]
      reviews_recues: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      nom: string
      prenom: string
      telephone: string | null
      role: $Enums.UserRole
      verified: boolean
      active: boolean
      stripe_customer_id: string | null
      premium_until: Date | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lieux<T extends User$lieuxArgs<ExtArgs> = {}>(args?: Subset<T, User$lieuxArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reservations<T extends User$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, User$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews_donnees<T extends User$reviews_donneesArgs<ExtArgs> = {}>(args?: Subset<T, User$reviews_donneesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews_recues<T extends User$reviews_recuesArgs<ExtArgs> = {}>(args?: Subset<T, User$reviews_recuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly nom: FieldRef<"User", 'String'>
    readonly prenom: FieldRef<"User", 'String'>
    readonly telephone: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly verified: FieldRef<"User", 'Boolean'>
    readonly active: FieldRef<"User", 'Boolean'>
    readonly stripe_customer_id: FieldRef<"User", 'String'>
    readonly premium_until: FieldRef<"User", 'DateTime'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.lieux
   */
  export type User$lieuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    where?: LieuWhereInput
    orderBy?: LieuOrderByWithRelationInput | LieuOrderByWithRelationInput[]
    cursor?: LieuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LieuScalarFieldEnum | LieuScalarFieldEnum[]
  }

  /**
   * User.reservations
   */
  export type User$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * User.reviews_donnees
   */
  export type User$reviews_donneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.reviews_recues
   */
  export type User$reviews_recuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Lieu
   */

  export type AggregateLieu = {
    _count: LieuCountAggregateOutputType | null
    _avg: LieuAvgAggregateOutputType | null
    _sum: LieuSumAggregateOutputType | null
    _min: LieuMinAggregateOutputType | null
    _max: LieuMaxAggregateOutputType | null
  }

  export type LieuAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    superficie: number | null
    prix_jour: number | null
    caution: number | null
  }

  export type LieuSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    superficie: number | null
    prix_jour: number | null
    caution: number | null
  }

  export type LieuMinAggregateOutputType = {
    id: string | null
    titre: string | null
    description: string | null
    type: $Enums.LieuType | null
    adresse: string | null
    ville: string | null
    code_postal: string | null
    latitude: number | null
    longitude: number | null
    superficie: number | null
    accessibilite: string | null
    restrictions: string | null
    prix_jour: number | null
    caution: number | null
    disponible: boolean | null
    instant_book: boolean | null
    video_url: string | null
    proprietaire_id: string | null
    statut: $Enums.LieuStatut | null
    verified: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LieuMaxAggregateOutputType = {
    id: string | null
    titre: string | null
    description: string | null
    type: $Enums.LieuType | null
    adresse: string | null
    ville: string | null
    code_postal: string | null
    latitude: number | null
    longitude: number | null
    superficie: number | null
    accessibilite: string | null
    restrictions: string | null
    prix_jour: number | null
    caution: number | null
    disponible: boolean | null
    instant_book: boolean | null
    video_url: string | null
    proprietaire_id: string | null
    statut: $Enums.LieuStatut | null
    verified: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LieuCountAggregateOutputType = {
    id: number
    titre: number
    description: number
    type: number
    adresse: number
    ville: number
    code_postal: number
    latitude: number
    longitude: number
    superficie: number
    accessibilite: number
    equipements: number
    restrictions: number
    prix_jour: number
    caution: number
    disponible: number
    instant_book: number
    images: number
    video_url: number
    proprietaire_id: number
    statut: number
    verified: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LieuAvgAggregateInputType = {
    latitude?: true
    longitude?: true
    superficie?: true
    prix_jour?: true
    caution?: true
  }

  export type LieuSumAggregateInputType = {
    latitude?: true
    longitude?: true
    superficie?: true
    prix_jour?: true
    caution?: true
  }

  export type LieuMinAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    type?: true
    adresse?: true
    ville?: true
    code_postal?: true
    latitude?: true
    longitude?: true
    superficie?: true
    accessibilite?: true
    restrictions?: true
    prix_jour?: true
    caution?: true
    disponible?: true
    instant_book?: true
    video_url?: true
    proprietaire_id?: true
    statut?: true
    verified?: true
    created_at?: true
    updated_at?: true
  }

  export type LieuMaxAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    type?: true
    adresse?: true
    ville?: true
    code_postal?: true
    latitude?: true
    longitude?: true
    superficie?: true
    accessibilite?: true
    restrictions?: true
    prix_jour?: true
    caution?: true
    disponible?: true
    instant_book?: true
    video_url?: true
    proprietaire_id?: true
    statut?: true
    verified?: true
    created_at?: true
    updated_at?: true
  }

  export type LieuCountAggregateInputType = {
    id?: true
    titre?: true
    description?: true
    type?: true
    adresse?: true
    ville?: true
    code_postal?: true
    latitude?: true
    longitude?: true
    superficie?: true
    accessibilite?: true
    equipements?: true
    restrictions?: true
    prix_jour?: true
    caution?: true
    disponible?: true
    instant_book?: true
    images?: true
    video_url?: true
    proprietaire_id?: true
    statut?: true
    verified?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LieuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lieu to aggregate.
     */
    where?: LieuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lieus to fetch.
     */
    orderBy?: LieuOrderByWithRelationInput | LieuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LieuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lieus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lieus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lieus
    **/
    _count?: true | LieuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LieuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LieuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LieuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LieuMaxAggregateInputType
  }

  export type GetLieuAggregateType<T extends LieuAggregateArgs> = {
        [P in keyof T & keyof AggregateLieu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLieu[P]>
      : GetScalarType<T[P], AggregateLieu[P]>
  }




  export type LieuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LieuWhereInput
    orderBy?: LieuOrderByWithAggregationInput | LieuOrderByWithAggregationInput[]
    by: LieuScalarFieldEnum[] | LieuScalarFieldEnum
    having?: LieuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LieuCountAggregateInputType | true
    _avg?: LieuAvgAggregateInputType
    _sum?: LieuSumAggregateInputType
    _min?: LieuMinAggregateInputType
    _max?: LieuMaxAggregateInputType
  }

  export type LieuGroupByOutputType = {
    id: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie: number | null
    accessibilite: string | null
    equipements: string[]
    restrictions: string | null
    prix_jour: number
    caution: number
    disponible: boolean
    instant_book: boolean
    images: string[]
    video_url: string | null
    proprietaire_id: string
    statut: $Enums.LieuStatut
    verified: boolean
    created_at: Date
    updated_at: Date
    _count: LieuCountAggregateOutputType | null
    _avg: LieuAvgAggregateOutputType | null
    _sum: LieuSumAggregateOutputType | null
    _min: LieuMinAggregateOutputType | null
    _max: LieuMaxAggregateOutputType | null
  }

  type GetLieuGroupByPayload<T extends LieuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LieuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LieuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LieuGroupByOutputType[P]>
            : GetScalarType<T[P], LieuGroupByOutputType[P]>
        }
      >
    >


  export type LieuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    type?: boolean
    adresse?: boolean
    ville?: boolean
    code_postal?: boolean
    latitude?: boolean
    longitude?: boolean
    superficie?: boolean
    accessibilite?: boolean
    equipements?: boolean
    restrictions?: boolean
    prix_jour?: boolean
    caution?: boolean
    disponible?: boolean
    instant_book?: boolean
    images?: boolean
    video_url?: boolean
    proprietaire_id?: boolean
    statut?: boolean
    verified?: boolean
    created_at?: boolean
    updated_at?: boolean
    proprietaire?: boolean | UserDefaultArgs<ExtArgs>
    reservations?: boolean | Lieu$reservationsArgs<ExtArgs>
    reviews?: boolean | Lieu$reviewsArgs<ExtArgs>
    _count?: boolean | LieuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lieu"]>

  export type LieuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    type?: boolean
    adresse?: boolean
    ville?: boolean
    code_postal?: boolean
    latitude?: boolean
    longitude?: boolean
    superficie?: boolean
    accessibilite?: boolean
    equipements?: boolean
    restrictions?: boolean
    prix_jour?: boolean
    caution?: boolean
    disponible?: boolean
    instant_book?: boolean
    images?: boolean
    video_url?: boolean
    proprietaire_id?: boolean
    statut?: boolean
    verified?: boolean
    created_at?: boolean
    updated_at?: boolean
    proprietaire?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lieu"]>

  export type LieuSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    description?: boolean
    type?: boolean
    adresse?: boolean
    ville?: boolean
    code_postal?: boolean
    latitude?: boolean
    longitude?: boolean
    superficie?: boolean
    accessibilite?: boolean
    equipements?: boolean
    restrictions?: boolean
    prix_jour?: boolean
    caution?: boolean
    disponible?: boolean
    instant_book?: boolean
    images?: boolean
    video_url?: boolean
    proprietaire_id?: boolean
    statut?: boolean
    verified?: boolean
    created_at?: boolean
    updated_at?: boolean
    proprietaire?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lieu"]>

  export type LieuSelectScalar = {
    id?: boolean
    titre?: boolean
    description?: boolean
    type?: boolean
    adresse?: boolean
    ville?: boolean
    code_postal?: boolean
    latitude?: boolean
    longitude?: boolean
    superficie?: boolean
    accessibilite?: boolean
    equipements?: boolean
    restrictions?: boolean
    prix_jour?: boolean
    caution?: boolean
    disponible?: boolean
    instant_book?: boolean
    images?: boolean
    video_url?: boolean
    proprietaire_id?: boolean
    statut?: boolean
    verified?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LieuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titre" | "description" | "type" | "adresse" | "ville" | "code_postal" | "latitude" | "longitude" | "superficie" | "accessibilite" | "equipements" | "restrictions" | "prix_jour" | "caution" | "disponible" | "instant_book" | "images" | "video_url" | "proprietaire_id" | "statut" | "verified" | "created_at" | "updated_at", ExtArgs["result"]["lieu"]>
  export type LieuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proprietaire?: boolean | UserDefaultArgs<ExtArgs>
    reservations?: boolean | Lieu$reservationsArgs<ExtArgs>
    reviews?: boolean | Lieu$reviewsArgs<ExtArgs>
    _count?: boolean | LieuCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LieuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proprietaire?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LieuIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proprietaire?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LieuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lieu"
    objects: {
      proprietaire: Prisma.$UserPayload<ExtArgs>
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      titre: string
      description: string
      type: $Enums.LieuType
      adresse: string
      ville: string
      code_postal: string
      latitude: number
      longitude: number
      superficie: number | null
      accessibilite: string | null
      equipements: string[]
      restrictions: string | null
      prix_jour: number
      caution: number
      disponible: boolean
      instant_book: boolean
      images: string[]
      video_url: string | null
      proprietaire_id: string
      statut: $Enums.LieuStatut
      verified: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["lieu"]>
    composites: {}
  }

  type LieuGetPayload<S extends boolean | null | undefined | LieuDefaultArgs> = $Result.GetResult<Prisma.$LieuPayload, S>

  type LieuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LieuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LieuCountAggregateInputType | true
    }

  export interface LieuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lieu'], meta: { name: 'Lieu' } }
    /**
     * Find zero or one Lieu that matches the filter.
     * @param {LieuFindUniqueArgs} args - Arguments to find a Lieu
     * @example
     * // Get one Lieu
     * const lieu = await prisma.lieu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LieuFindUniqueArgs>(args: SelectSubset<T, LieuFindUniqueArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lieu that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LieuFindUniqueOrThrowArgs} args - Arguments to find a Lieu
     * @example
     * // Get one Lieu
     * const lieu = await prisma.lieu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LieuFindUniqueOrThrowArgs>(args: SelectSubset<T, LieuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lieu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LieuFindFirstArgs} args - Arguments to find a Lieu
     * @example
     * // Get one Lieu
     * const lieu = await prisma.lieu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LieuFindFirstArgs>(args?: SelectSubset<T, LieuFindFirstArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lieu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LieuFindFirstOrThrowArgs} args - Arguments to find a Lieu
     * @example
     * // Get one Lieu
     * const lieu = await prisma.lieu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LieuFindFirstOrThrowArgs>(args?: SelectSubset<T, LieuFindFirstOrThrowArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lieus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LieuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lieus
     * const lieus = await prisma.lieu.findMany()
     * 
     * // Get first 10 Lieus
     * const lieus = await prisma.lieu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lieuWithIdOnly = await prisma.lieu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LieuFindManyArgs>(args?: SelectSubset<T, LieuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lieu.
     * @param {LieuCreateArgs} args - Arguments to create a Lieu.
     * @example
     * // Create one Lieu
     * const Lieu = await prisma.lieu.create({
     *   data: {
     *     // ... data to create a Lieu
     *   }
     * })
     * 
     */
    create<T extends LieuCreateArgs>(args: SelectSubset<T, LieuCreateArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lieus.
     * @param {LieuCreateManyArgs} args - Arguments to create many Lieus.
     * @example
     * // Create many Lieus
     * const lieu = await prisma.lieu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LieuCreateManyArgs>(args?: SelectSubset<T, LieuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lieus and returns the data saved in the database.
     * @param {LieuCreateManyAndReturnArgs} args - Arguments to create many Lieus.
     * @example
     * // Create many Lieus
     * const lieu = await prisma.lieu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lieus and only return the `id`
     * const lieuWithIdOnly = await prisma.lieu.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LieuCreateManyAndReturnArgs>(args?: SelectSubset<T, LieuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lieu.
     * @param {LieuDeleteArgs} args - Arguments to delete one Lieu.
     * @example
     * // Delete one Lieu
     * const Lieu = await prisma.lieu.delete({
     *   where: {
     *     // ... filter to delete one Lieu
     *   }
     * })
     * 
     */
    delete<T extends LieuDeleteArgs>(args: SelectSubset<T, LieuDeleteArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lieu.
     * @param {LieuUpdateArgs} args - Arguments to update one Lieu.
     * @example
     * // Update one Lieu
     * const lieu = await prisma.lieu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LieuUpdateArgs>(args: SelectSubset<T, LieuUpdateArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lieus.
     * @param {LieuDeleteManyArgs} args - Arguments to filter Lieus to delete.
     * @example
     * // Delete a few Lieus
     * const { count } = await prisma.lieu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LieuDeleteManyArgs>(args?: SelectSubset<T, LieuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lieus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LieuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lieus
     * const lieu = await prisma.lieu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LieuUpdateManyArgs>(args: SelectSubset<T, LieuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lieus and returns the data updated in the database.
     * @param {LieuUpdateManyAndReturnArgs} args - Arguments to update many Lieus.
     * @example
     * // Update many Lieus
     * const lieu = await prisma.lieu.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lieus and only return the `id`
     * const lieuWithIdOnly = await prisma.lieu.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LieuUpdateManyAndReturnArgs>(args: SelectSubset<T, LieuUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lieu.
     * @param {LieuUpsertArgs} args - Arguments to update or create a Lieu.
     * @example
     * // Update or create a Lieu
     * const lieu = await prisma.lieu.upsert({
     *   create: {
     *     // ... data to create a Lieu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lieu we want to update
     *   }
     * })
     */
    upsert<T extends LieuUpsertArgs>(args: SelectSubset<T, LieuUpsertArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lieus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LieuCountArgs} args - Arguments to filter Lieus to count.
     * @example
     * // Count the number of Lieus
     * const count = await prisma.lieu.count({
     *   where: {
     *     // ... the filter for the Lieus we want to count
     *   }
     * })
    **/
    count<T extends LieuCountArgs>(
      args?: Subset<T, LieuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LieuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lieu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LieuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LieuAggregateArgs>(args: Subset<T, LieuAggregateArgs>): Prisma.PrismaPromise<GetLieuAggregateType<T>>

    /**
     * Group by Lieu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LieuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LieuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LieuGroupByArgs['orderBy'] }
        : { orderBy?: LieuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LieuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLieuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lieu model
   */
  readonly fields: LieuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lieu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LieuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proprietaire<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reservations<T extends Lieu$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, Lieu$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Lieu$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Lieu$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lieu model
   */
  interface LieuFieldRefs {
    readonly id: FieldRef<"Lieu", 'String'>
    readonly titre: FieldRef<"Lieu", 'String'>
    readonly description: FieldRef<"Lieu", 'String'>
    readonly type: FieldRef<"Lieu", 'LieuType'>
    readonly adresse: FieldRef<"Lieu", 'String'>
    readonly ville: FieldRef<"Lieu", 'String'>
    readonly code_postal: FieldRef<"Lieu", 'String'>
    readonly latitude: FieldRef<"Lieu", 'Float'>
    readonly longitude: FieldRef<"Lieu", 'Float'>
    readonly superficie: FieldRef<"Lieu", 'Int'>
    readonly accessibilite: FieldRef<"Lieu", 'String'>
    readonly equipements: FieldRef<"Lieu", 'String[]'>
    readonly restrictions: FieldRef<"Lieu", 'String'>
    readonly prix_jour: FieldRef<"Lieu", 'Float'>
    readonly caution: FieldRef<"Lieu", 'Float'>
    readonly disponible: FieldRef<"Lieu", 'Boolean'>
    readonly instant_book: FieldRef<"Lieu", 'Boolean'>
    readonly images: FieldRef<"Lieu", 'String[]'>
    readonly video_url: FieldRef<"Lieu", 'String'>
    readonly proprietaire_id: FieldRef<"Lieu", 'String'>
    readonly statut: FieldRef<"Lieu", 'LieuStatut'>
    readonly verified: FieldRef<"Lieu", 'Boolean'>
    readonly created_at: FieldRef<"Lieu", 'DateTime'>
    readonly updated_at: FieldRef<"Lieu", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Lieu findUnique
   */
  export type LieuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * Filter, which Lieu to fetch.
     */
    where: LieuWhereUniqueInput
  }

  /**
   * Lieu findUniqueOrThrow
   */
  export type LieuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * Filter, which Lieu to fetch.
     */
    where: LieuWhereUniqueInput
  }

  /**
   * Lieu findFirst
   */
  export type LieuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * Filter, which Lieu to fetch.
     */
    where?: LieuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lieus to fetch.
     */
    orderBy?: LieuOrderByWithRelationInput | LieuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lieus.
     */
    cursor?: LieuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lieus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lieus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lieus.
     */
    distinct?: LieuScalarFieldEnum | LieuScalarFieldEnum[]
  }

  /**
   * Lieu findFirstOrThrow
   */
  export type LieuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * Filter, which Lieu to fetch.
     */
    where?: LieuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lieus to fetch.
     */
    orderBy?: LieuOrderByWithRelationInput | LieuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lieus.
     */
    cursor?: LieuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lieus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lieus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lieus.
     */
    distinct?: LieuScalarFieldEnum | LieuScalarFieldEnum[]
  }

  /**
   * Lieu findMany
   */
  export type LieuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * Filter, which Lieus to fetch.
     */
    where?: LieuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lieus to fetch.
     */
    orderBy?: LieuOrderByWithRelationInput | LieuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lieus.
     */
    cursor?: LieuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lieus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lieus.
     */
    skip?: number
    distinct?: LieuScalarFieldEnum | LieuScalarFieldEnum[]
  }

  /**
   * Lieu create
   */
  export type LieuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * The data needed to create a Lieu.
     */
    data: XOR<LieuCreateInput, LieuUncheckedCreateInput>
  }

  /**
   * Lieu createMany
   */
  export type LieuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lieus.
     */
    data: LieuCreateManyInput | LieuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lieu createManyAndReturn
   */
  export type LieuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * The data used to create many Lieus.
     */
    data: LieuCreateManyInput | LieuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lieu update
   */
  export type LieuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * The data needed to update a Lieu.
     */
    data: XOR<LieuUpdateInput, LieuUncheckedUpdateInput>
    /**
     * Choose, which Lieu to update.
     */
    where: LieuWhereUniqueInput
  }

  /**
   * Lieu updateMany
   */
  export type LieuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lieus.
     */
    data: XOR<LieuUpdateManyMutationInput, LieuUncheckedUpdateManyInput>
    /**
     * Filter which Lieus to update
     */
    where?: LieuWhereInput
    /**
     * Limit how many Lieus to update.
     */
    limit?: number
  }

  /**
   * Lieu updateManyAndReturn
   */
  export type LieuUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * The data used to update Lieus.
     */
    data: XOR<LieuUpdateManyMutationInput, LieuUncheckedUpdateManyInput>
    /**
     * Filter which Lieus to update
     */
    where?: LieuWhereInput
    /**
     * Limit how many Lieus to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lieu upsert
   */
  export type LieuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * The filter to search for the Lieu to update in case it exists.
     */
    where: LieuWhereUniqueInput
    /**
     * In case the Lieu found by the `where` argument doesn't exist, create a new Lieu with this data.
     */
    create: XOR<LieuCreateInput, LieuUncheckedCreateInput>
    /**
     * In case the Lieu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LieuUpdateInput, LieuUncheckedUpdateInput>
  }

  /**
   * Lieu delete
   */
  export type LieuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
    /**
     * Filter which Lieu to delete.
     */
    where: LieuWhereUniqueInput
  }

  /**
   * Lieu deleteMany
   */
  export type LieuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lieus to delete
     */
    where?: LieuWhereInput
    /**
     * Limit how many Lieus to delete.
     */
    limit?: number
  }

  /**
   * Lieu.reservations
   */
  export type Lieu$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Lieu.reviews
   */
  export type Lieu$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Lieu without action
   */
  export type LieuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lieu
     */
    select?: LieuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lieu
     */
    omit?: LieuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LieuInclude<ExtArgs> | null
  }


  /**
   * Model Reservation
   */

  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationAvgAggregateOutputType = {
    nb_jours: number | null
    nb_personnes: number | null
    prix_total: number | null
    caution: number | null
    commission: number | null
  }

  export type ReservationSumAggregateOutputType = {
    nb_jours: number | null
    nb_personnes: number | null
    prix_total: number | null
    caution: number | null
    commission: number | null
  }

  export type ReservationMinAggregateOutputType = {
    id: string | null
    date_debut: Date | null
    date_fin: Date | null
    nb_jours: number | null
    locataire_id: string | null
    lieu_id: string | null
    type_projet: string | null
    nb_personnes: number | null
    description: string | null
    prix_total: number | null
    caution: number | null
    commission: number | null
    statut: $Enums.ReservationStatut | null
    created_at: Date | null
    updated_at: Date | null
    confirme_at: Date | null
    annule_at: Date | null
  }

  export type ReservationMaxAggregateOutputType = {
    id: string | null
    date_debut: Date | null
    date_fin: Date | null
    nb_jours: number | null
    locataire_id: string | null
    lieu_id: string | null
    type_projet: string | null
    nb_personnes: number | null
    description: string | null
    prix_total: number | null
    caution: number | null
    commission: number | null
    statut: $Enums.ReservationStatut | null
    created_at: Date | null
    updated_at: Date | null
    confirme_at: Date | null
    annule_at: Date | null
  }

  export type ReservationCountAggregateOutputType = {
    id: number
    date_debut: number
    date_fin: number
    nb_jours: number
    locataire_id: number
    lieu_id: number
    type_projet: number
    nb_personnes: number
    description: number
    equipements_demandes: number
    prix_total: number
    caution: number
    commission: number
    statut: number
    created_at: number
    updated_at: number
    confirme_at: number
    annule_at: number
    _all: number
  }


  export type ReservationAvgAggregateInputType = {
    nb_jours?: true
    nb_personnes?: true
    prix_total?: true
    caution?: true
    commission?: true
  }

  export type ReservationSumAggregateInputType = {
    nb_jours?: true
    nb_personnes?: true
    prix_total?: true
    caution?: true
    commission?: true
  }

  export type ReservationMinAggregateInputType = {
    id?: true
    date_debut?: true
    date_fin?: true
    nb_jours?: true
    locataire_id?: true
    lieu_id?: true
    type_projet?: true
    nb_personnes?: true
    description?: true
    prix_total?: true
    caution?: true
    commission?: true
    statut?: true
    created_at?: true
    updated_at?: true
    confirme_at?: true
    annule_at?: true
  }

  export type ReservationMaxAggregateInputType = {
    id?: true
    date_debut?: true
    date_fin?: true
    nb_jours?: true
    locataire_id?: true
    lieu_id?: true
    type_projet?: true
    nb_personnes?: true
    description?: true
    prix_total?: true
    caution?: true
    commission?: true
    statut?: true
    created_at?: true
    updated_at?: true
    confirme_at?: true
    annule_at?: true
  }

  export type ReservationCountAggregateInputType = {
    id?: true
    date_debut?: true
    date_fin?: true
    nb_jours?: true
    locataire_id?: true
    lieu_id?: true
    type_projet?: true
    nb_personnes?: true
    description?: true
    equipements_demandes?: true
    prix_total?: true
    caution?: true
    commission?: true
    statut?: true
    created_at?: true
    updated_at?: true
    confirme_at?: true
    annule_at?: true
    _all?: true
  }

  export type ReservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservation to aggregate.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type ReservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithAggregationInput | ReservationOrderByWithAggregationInput[]
    by: ReservationScalarFieldEnum[] | ReservationScalarFieldEnum
    having?: ReservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _avg?: ReservationAvgAggregateInputType
    _sum?: ReservationSumAggregateInputType
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }

  export type ReservationGroupByOutputType = {
    id: string
    date_debut: Date
    date_fin: Date
    nb_jours: number
    locataire_id: string
    lieu_id: string
    type_projet: string
    nb_personnes: number
    description: string | null
    equipements_demandes: string[]
    prix_total: number
    caution: number
    commission: number
    statut: $Enums.ReservationStatut
    created_at: Date
    updated_at: Date
    confirme_at: Date | null
    annule_at: Date | null
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends ReservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type ReservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date_debut?: boolean
    date_fin?: boolean
    nb_jours?: boolean
    locataire_id?: boolean
    lieu_id?: boolean
    type_projet?: boolean
    nb_personnes?: boolean
    description?: boolean
    equipements_demandes?: boolean
    prix_total?: boolean
    caution?: boolean
    commission?: boolean
    statut?: boolean
    created_at?: boolean
    updated_at?: boolean
    confirme_at?: boolean
    annule_at?: boolean
    locataire?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
    payments?: boolean | Reservation$paymentsArgs<ExtArgs>
    review?: boolean | Reservation$reviewArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date_debut?: boolean
    date_fin?: boolean
    nb_jours?: boolean
    locataire_id?: boolean
    lieu_id?: boolean
    type_projet?: boolean
    nb_personnes?: boolean
    description?: boolean
    equipements_demandes?: boolean
    prix_total?: boolean
    caution?: boolean
    commission?: boolean
    statut?: boolean
    created_at?: boolean
    updated_at?: boolean
    confirme_at?: boolean
    annule_at?: boolean
    locataire?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date_debut?: boolean
    date_fin?: boolean
    nb_jours?: boolean
    locataire_id?: boolean
    lieu_id?: boolean
    type_projet?: boolean
    nb_personnes?: boolean
    description?: boolean
    equipements_demandes?: boolean
    prix_total?: boolean
    caution?: boolean
    commission?: boolean
    statut?: boolean
    created_at?: boolean
    updated_at?: boolean
    confirme_at?: boolean
    annule_at?: boolean
    locataire?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectScalar = {
    id?: boolean
    date_debut?: boolean
    date_fin?: boolean
    nb_jours?: boolean
    locataire_id?: boolean
    lieu_id?: boolean
    type_projet?: boolean
    nb_personnes?: boolean
    description?: boolean
    equipements_demandes?: boolean
    prix_total?: boolean
    caution?: boolean
    commission?: boolean
    statut?: boolean
    created_at?: boolean
    updated_at?: boolean
    confirme_at?: boolean
    annule_at?: boolean
  }

  export type ReservationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date_debut" | "date_fin" | "nb_jours" | "locataire_id" | "lieu_id" | "type_projet" | "nb_personnes" | "description" | "equipements_demandes" | "prix_total" | "caution" | "commission" | "statut" | "created_at" | "updated_at" | "confirme_at" | "annule_at", ExtArgs["result"]["reservation"]>
  export type ReservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locataire?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
    payments?: boolean | Reservation$paymentsArgs<ExtArgs>
    review?: boolean | Reservation$reviewArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReservationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locataire?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }
  export type ReservationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locataire?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }

  export type $ReservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reservation"
    objects: {
      locataire: Prisma.$UserPayload<ExtArgs>
      lieu: Prisma.$LieuPayload<ExtArgs>
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      review: Prisma.$ReviewPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date_debut: Date
      date_fin: Date
      nb_jours: number
      locataire_id: string
      lieu_id: string
      type_projet: string
      nb_personnes: number
      description: string | null
      equipements_demandes: string[]
      prix_total: number
      caution: number
      commission: number
      statut: $Enums.ReservationStatut
      created_at: Date
      updated_at: Date
      confirme_at: Date | null
      annule_at: Date | null
    }, ExtArgs["result"]["reservation"]>
    composites: {}
  }

  type ReservationGetPayload<S extends boolean | null | undefined | ReservationDefaultArgs> = $Result.GetResult<Prisma.$ReservationPayload, S>

  type ReservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReservationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReservationCountAggregateInputType | true
    }

  export interface ReservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reservation'], meta: { name: 'Reservation' } }
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {ReservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReservationFindUniqueArgs>(args: SelectSubset<T, ReservationFindUniqueArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reservation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReservationFindUniqueOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReservationFindUniqueOrThrowArgs>(args: SelectSubset<T, ReservationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReservationFindFirstArgs>(args?: SelectSubset<T, ReservationFindFirstArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReservationFindFirstOrThrowArgs>(args?: SelectSubset<T, ReservationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservationWithIdOnly = await prisma.reservation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReservationFindManyArgs>(args?: SelectSubset<T, ReservationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reservation.
     * @param {ReservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
     */
    create<T extends ReservationCreateArgs>(args: SelectSubset<T, ReservationCreateArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reservations.
     * @param {ReservationCreateManyArgs} args - Arguments to create many Reservations.
     * @example
     * // Create many Reservations
     * const reservation = await prisma.reservation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReservationCreateManyArgs>(args?: SelectSubset<T, ReservationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reservations and returns the data saved in the database.
     * @param {ReservationCreateManyAndReturnArgs} args - Arguments to create many Reservations.
     * @example
     * // Create many Reservations
     * const reservation = await prisma.reservation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reservations and only return the `id`
     * const reservationWithIdOnly = await prisma.reservation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReservationCreateManyAndReturnArgs>(args?: SelectSubset<T, ReservationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Reservation.
     * @param {ReservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
     */
    delete<T extends ReservationDeleteArgs>(args: SelectSubset<T, ReservationDeleteArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reservation.
     * @param {ReservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReservationUpdateArgs>(args: SelectSubset<T, ReservationUpdateArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reservations.
     * @param {ReservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReservationDeleteManyArgs>(args?: SelectSubset<T, ReservationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReservationUpdateManyArgs>(args: SelectSubset<T, ReservationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations and returns the data updated in the database.
     * @param {ReservationUpdateManyAndReturnArgs} args - Arguments to update many Reservations.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reservations and only return the `id`
     * const reservationWithIdOnly = await prisma.reservation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReservationUpdateManyAndReturnArgs>(args: SelectSubset<T, ReservationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Reservation.
     * @param {ReservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
     */
    upsert<T extends ReservationUpsertArgs>(args: SelectSubset<T, ReservationUpsertArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends ReservationCountArgs>(
      args?: Subset<T, ReservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): Prisma.PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationGroupByArgs['orderBy'] }
        : { orderBy?: ReservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reservation model
   */
  readonly fields: ReservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    locataire<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lieu<T extends LieuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LieuDefaultArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payments<T extends Reservation$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Reservation$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    review<T extends Reservation$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Reservation$reviewArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reservation model
   */
  interface ReservationFieldRefs {
    readonly id: FieldRef<"Reservation", 'String'>
    readonly date_debut: FieldRef<"Reservation", 'DateTime'>
    readonly date_fin: FieldRef<"Reservation", 'DateTime'>
    readonly nb_jours: FieldRef<"Reservation", 'Int'>
    readonly locataire_id: FieldRef<"Reservation", 'String'>
    readonly lieu_id: FieldRef<"Reservation", 'String'>
    readonly type_projet: FieldRef<"Reservation", 'String'>
    readonly nb_personnes: FieldRef<"Reservation", 'Int'>
    readonly description: FieldRef<"Reservation", 'String'>
    readonly equipements_demandes: FieldRef<"Reservation", 'String[]'>
    readonly prix_total: FieldRef<"Reservation", 'Float'>
    readonly caution: FieldRef<"Reservation", 'Float'>
    readonly commission: FieldRef<"Reservation", 'Float'>
    readonly statut: FieldRef<"Reservation", 'ReservationStatut'>
    readonly created_at: FieldRef<"Reservation", 'DateTime'>
    readonly updated_at: FieldRef<"Reservation", 'DateTime'>
    readonly confirme_at: FieldRef<"Reservation", 'DateTime'>
    readonly annule_at: FieldRef<"Reservation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reservation findUnique
   */
  export type ReservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation findUniqueOrThrow
   */
  export type ReservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation findFirst
   */
  export type ReservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation findFirstOrThrow
   */
  export type ReservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation findMany
   */
  export type ReservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservations to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation create
   */
  export type ReservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Reservation.
     */
    data: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
  }

  /**
   * Reservation createMany
   */
  export type ReservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reservation createManyAndReturn
   */
  export type ReservationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reservation update
   */
  export type ReservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Reservation.
     */
    data: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
    /**
     * Choose, which Reservation to update.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation updateMany
   */
  export type ReservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservations.
     */
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     */
    where?: ReservationWhereInput
    /**
     * Limit how many Reservations to update.
     */
    limit?: number
  }

  /**
   * Reservation updateManyAndReturn
   */
  export type ReservationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * The data used to update Reservations.
     */
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     */
    where?: ReservationWhereInput
    /**
     * Limit how many Reservations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reservation upsert
   */
  export type ReservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Reservation to update in case it exists.
     */
    where: ReservationWhereUniqueInput
    /**
     * In case the Reservation found by the `where` argument doesn't exist, create a new Reservation with this data.
     */
    create: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
    /**
     * In case the Reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
  }

  /**
   * Reservation delete
   */
  export type ReservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter which Reservation to delete.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation deleteMany
   */
  export type ReservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservations to delete
     */
    where?: ReservationWhereInput
    /**
     * Limit how many Reservations to delete.
     */
    limit?: number
  }

  /**
   * Reservation.payments
   */
  export type Reservation$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Reservation.review
   */
  export type Reservation$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
  }

  /**
   * Reservation without action
   */
  export type ReservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
    commission: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
    commission: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    reservation_id: string | null
    amount: number | null
    commission: number | null
    type: $Enums.PaymentType | null
    stripe_payment_intent_id: string | null
    stripe_transfer_id: string | null
    statut: $Enums.PaymentStatut | null
    created_at: Date | null
    processed_at: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    reservation_id: string | null
    amount: number | null
    commission: number | null
    type: $Enums.PaymentType | null
    stripe_payment_intent_id: string | null
    stripe_transfer_id: string | null
    statut: $Enums.PaymentStatut | null
    created_at: Date | null
    processed_at: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    reservation_id: number
    amount: number
    commission: number
    type: number
    stripe_payment_intent_id: number
    stripe_transfer_id: number
    statut: number
    created_at: number
    processed_at: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
    commission?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
    commission?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    reservation_id?: true
    amount?: true
    commission?: true
    type?: true
    stripe_payment_intent_id?: true
    stripe_transfer_id?: true
    statut?: true
    created_at?: true
    processed_at?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    reservation_id?: true
    amount?: true
    commission?: true
    type?: true
    stripe_payment_intent_id?: true
    stripe_transfer_id?: true
    statut?: true
    created_at?: true
    processed_at?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    reservation_id?: true
    amount?: true
    commission?: true
    type?: true
    stripe_payment_intent_id?: true
    stripe_transfer_id?: true
    statut?: true
    created_at?: true
    processed_at?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    reservation_id: string
    amount: number
    commission: number
    type: $Enums.PaymentType
    stripe_payment_intent_id: string | null
    stripe_transfer_id: string | null
    statut: $Enums.PaymentStatut
    created_at: Date
    processed_at: Date | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    amount?: boolean
    commission?: boolean
    type?: boolean
    stripe_payment_intent_id?: boolean
    stripe_transfer_id?: boolean
    statut?: boolean
    created_at?: boolean
    processed_at?: boolean
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    amount?: boolean
    commission?: boolean
    type?: boolean
    stripe_payment_intent_id?: boolean
    stripe_transfer_id?: boolean
    statut?: boolean
    created_at?: boolean
    processed_at?: boolean
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    amount?: boolean
    commission?: boolean
    type?: boolean
    stripe_payment_intent_id?: boolean
    stripe_transfer_id?: boolean
    statut?: boolean
    created_at?: boolean
    processed_at?: boolean
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    reservation_id?: boolean
    amount?: boolean
    commission?: boolean
    type?: boolean
    stripe_payment_intent_id?: boolean
    stripe_transfer_id?: boolean
    statut?: boolean
    created_at?: boolean
    processed_at?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reservation_id" | "amount" | "commission" | "type" | "stripe_payment_intent_id" | "stripe_transfer_id" | "statut" | "created_at" | "processed_at", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      reservation: Prisma.$ReservationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reservation_id: string
      amount: number
      commission: number
      type: $Enums.PaymentType
      stripe_payment_intent_id: string | null
      stripe_transfer_id: string | null
      statut: $Enums.PaymentStatut
      created_at: Date
      processed_at: Date | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reservation<T extends ReservationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReservationDefaultArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly reservation_id: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Float'>
    readonly commission: FieldRef<"Payment", 'Float'>
    readonly type: FieldRef<"Payment", 'PaymentType'>
    readonly stripe_payment_intent_id: FieldRef<"Payment", 'String'>
    readonly stripe_transfer_id: FieldRef<"Payment", 'String'>
    readonly statut: FieldRef<"Payment", 'PaymentStatut'>
    readonly created_at: FieldRef<"Payment", 'DateTime'>
    readonly processed_at: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    reservation_id: string | null
    auteur_id: string | null
    target_id: string | null
    lieu_id: string | null
    rating: number | null
    commentaire: string | null
    created_at: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    reservation_id: string | null
    auteur_id: string | null
    target_id: string | null
    lieu_id: string | null
    rating: number | null
    commentaire: string | null
    created_at: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    reservation_id: number
    auteur_id: number
    target_id: number
    lieu_id: number
    rating: number
    commentaire: number
    created_at: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    reservation_id?: true
    auteur_id?: true
    target_id?: true
    lieu_id?: true
    rating?: true
    commentaire?: true
    created_at?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    reservation_id?: true
    auteur_id?: true
    target_id?: true
    lieu_id?: true
    rating?: true
    commentaire?: true
    created_at?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    reservation_id?: true
    auteur_id?: true
    target_id?: true
    lieu_id?: true
    rating?: true
    commentaire?: true
    created_at?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    reservation_id: string
    auteur_id: string
    target_id: string
    lieu_id: string
    rating: number
    commentaire: string | null
    created_at: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    auteur_id?: boolean
    target_id?: boolean
    lieu_id?: boolean
    rating?: boolean
    commentaire?: boolean
    created_at?: boolean
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
    auteur?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    auteur_id?: boolean
    target_id?: boolean
    lieu_id?: boolean
    rating?: boolean
    commentaire?: boolean
    created_at?: boolean
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
    auteur?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    auteur_id?: boolean
    target_id?: boolean
    lieu_id?: boolean
    rating?: boolean
    commentaire?: boolean
    created_at?: boolean
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
    auteur?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    reservation_id?: boolean
    auteur_id?: boolean
    target_id?: boolean
    lieu_id?: boolean
    rating?: boolean
    commentaire?: boolean
    created_at?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reservation_id" | "auteur_id" | "target_id" | "lieu_id" | "rating" | "commentaire" | "created_at", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
    auteur?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
    auteur?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
    auteur?: boolean | UserDefaultArgs<ExtArgs>
    target?: boolean | UserDefaultArgs<ExtArgs>
    lieu?: boolean | LieuDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      reservation: Prisma.$ReservationPayload<ExtArgs>
      auteur: Prisma.$UserPayload<ExtArgs>
      target: Prisma.$UserPayload<ExtArgs>
      lieu: Prisma.$LieuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reservation_id: string
      auteur_id: string
      target_id: string
      lieu_id: string
      rating: number
      commentaire: string | null
      created_at: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reservation<T extends ReservationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReservationDefaultArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    auteur<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    target<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lieu<T extends LieuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LieuDefaultArgs<ExtArgs>>): Prisma__LieuClient<$Result.GetResult<Prisma.$LieuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly reservation_id: FieldRef<"Review", 'String'>
    readonly auteur_id: FieldRef<"Review", 'String'>
    readonly target_id: FieldRef<"Review", 'String'>
    readonly lieu_id: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly commentaire: FieldRef<"Review", 'String'>
    readonly created_at: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    nom: 'nom',
    prenom: 'prenom',
    telephone: 'telephone',
    role: 'role',
    verified: 'verified',
    active: 'active',
    stripe_customer_id: 'stripe_customer_id',
    premium_until: 'premium_until',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LieuScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    description: 'description',
    type: 'type',
    adresse: 'adresse',
    ville: 'ville',
    code_postal: 'code_postal',
    latitude: 'latitude',
    longitude: 'longitude',
    superficie: 'superficie',
    accessibilite: 'accessibilite',
    equipements: 'equipements',
    restrictions: 'restrictions',
    prix_jour: 'prix_jour',
    caution: 'caution',
    disponible: 'disponible',
    instant_book: 'instant_book',
    images: 'images',
    video_url: 'video_url',
    proprietaire_id: 'proprietaire_id',
    statut: 'statut',
    verified: 'verified',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LieuScalarFieldEnum = (typeof LieuScalarFieldEnum)[keyof typeof LieuScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    id: 'id',
    date_debut: 'date_debut',
    date_fin: 'date_fin',
    nb_jours: 'nb_jours',
    locataire_id: 'locataire_id',
    lieu_id: 'lieu_id',
    type_projet: 'type_projet',
    nb_personnes: 'nb_personnes',
    description: 'description',
    equipements_demandes: 'equipements_demandes',
    prix_total: 'prix_total',
    caution: 'caution',
    commission: 'commission',
    statut: 'statut',
    created_at: 'created_at',
    updated_at: 'updated_at',
    confirme_at: 'confirme_at',
    annule_at: 'annule_at'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    reservation_id: 'reservation_id',
    amount: 'amount',
    commission: 'commission',
    type: 'type',
    stripe_payment_intent_id: 'stripe_payment_intent_id',
    stripe_transfer_id: 'stripe_transfer_id',
    statut: 'statut',
    created_at: 'created_at',
    processed_at: 'processed_at'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    reservation_id: 'reservation_id',
    auteur_id: 'auteur_id',
    target_id: 'target_id',
    lieu_id: 'lieu_id',
    rating: 'rating',
    commentaire: 'commentaire',
    created_at: 'created_at'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'LieuType'
   */
  export type EnumLieuTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LieuType'>
    


  /**
   * Reference to a field of type 'LieuType[]'
   */
  export type ListEnumLieuTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LieuType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'LieuStatut'
   */
  export type EnumLieuStatutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LieuStatut'>
    


  /**
   * Reference to a field of type 'LieuStatut[]'
   */
  export type ListEnumLieuStatutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LieuStatut[]'>
    


  /**
   * Reference to a field of type 'ReservationStatut'
   */
  export type EnumReservationStatutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReservationStatut'>
    


  /**
   * Reference to a field of type 'ReservationStatut[]'
   */
  export type ListEnumReservationStatutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReservationStatut[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'PaymentStatut'
   */
  export type EnumPaymentStatutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatut'>
    


  /**
   * Reference to a field of type 'PaymentStatut[]'
   */
  export type ListEnumPaymentStatutFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatut[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    nom?: StringFilter<"User"> | string
    prenom?: StringFilter<"User"> | string
    telephone?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    verified?: BoolFilter<"User"> | boolean
    active?: BoolFilter<"User"> | boolean
    stripe_customer_id?: StringNullableFilter<"User"> | string | null
    premium_until?: DateTimeNullableFilter<"User"> | Date | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    lieux?: LieuListRelationFilter
    reservations?: ReservationListRelationFilter
    reviews_donnees?: ReviewListRelationFilter
    reviews_recues?: ReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrderInput | SortOrder
    role?: SortOrder
    verified?: SortOrder
    active?: SortOrder
    stripe_customer_id?: SortOrderInput | SortOrder
    premium_until?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    lieux?: LieuOrderByRelationAggregateInput
    reservations?: ReservationOrderByRelationAggregateInput
    reviews_donnees?: ReviewOrderByRelationAggregateInput
    reviews_recues?: ReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    nom?: StringFilter<"User"> | string
    prenom?: StringFilter<"User"> | string
    telephone?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    verified?: BoolFilter<"User"> | boolean
    active?: BoolFilter<"User"> | boolean
    stripe_customer_id?: StringNullableFilter<"User"> | string | null
    premium_until?: DateTimeNullableFilter<"User"> | Date | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    lieux?: LieuListRelationFilter
    reservations?: ReservationListRelationFilter
    reviews_donnees?: ReviewListRelationFilter
    reviews_recues?: ReviewListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrderInput | SortOrder
    role?: SortOrder
    verified?: SortOrder
    active?: SortOrder
    stripe_customer_id?: SortOrderInput | SortOrder
    premium_until?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    nom?: StringWithAggregatesFilter<"User"> | string
    prenom?: StringWithAggregatesFilter<"User"> | string
    telephone?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    verified?: BoolWithAggregatesFilter<"User"> | boolean
    active?: BoolWithAggregatesFilter<"User"> | boolean
    stripe_customer_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    premium_until?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type LieuWhereInput = {
    AND?: LieuWhereInput | LieuWhereInput[]
    OR?: LieuWhereInput[]
    NOT?: LieuWhereInput | LieuWhereInput[]
    id?: StringFilter<"Lieu"> | string
    titre?: StringFilter<"Lieu"> | string
    description?: StringFilter<"Lieu"> | string
    type?: EnumLieuTypeFilter<"Lieu"> | $Enums.LieuType
    adresse?: StringFilter<"Lieu"> | string
    ville?: StringFilter<"Lieu"> | string
    code_postal?: StringFilter<"Lieu"> | string
    latitude?: FloatFilter<"Lieu"> | number
    longitude?: FloatFilter<"Lieu"> | number
    superficie?: IntNullableFilter<"Lieu"> | number | null
    accessibilite?: StringNullableFilter<"Lieu"> | string | null
    equipements?: StringNullableListFilter<"Lieu">
    restrictions?: StringNullableFilter<"Lieu"> | string | null
    prix_jour?: FloatFilter<"Lieu"> | number
    caution?: FloatFilter<"Lieu"> | number
    disponible?: BoolFilter<"Lieu"> | boolean
    instant_book?: BoolFilter<"Lieu"> | boolean
    images?: StringNullableListFilter<"Lieu">
    video_url?: StringNullableFilter<"Lieu"> | string | null
    proprietaire_id?: StringFilter<"Lieu"> | string
    statut?: EnumLieuStatutFilter<"Lieu"> | $Enums.LieuStatut
    verified?: BoolFilter<"Lieu"> | boolean
    created_at?: DateTimeFilter<"Lieu"> | Date | string
    updated_at?: DateTimeFilter<"Lieu"> | Date | string
    proprietaire?: XOR<UserScalarRelationFilter, UserWhereInput>
    reservations?: ReservationListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type LieuOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    code_postal?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    superficie?: SortOrderInput | SortOrder
    accessibilite?: SortOrderInput | SortOrder
    equipements?: SortOrder
    restrictions?: SortOrderInput | SortOrder
    prix_jour?: SortOrder
    caution?: SortOrder
    disponible?: SortOrder
    instant_book?: SortOrder
    images?: SortOrder
    video_url?: SortOrderInput | SortOrder
    proprietaire_id?: SortOrder
    statut?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    proprietaire?: UserOrderByWithRelationInput
    reservations?: ReservationOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type LieuWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LieuWhereInput | LieuWhereInput[]
    OR?: LieuWhereInput[]
    NOT?: LieuWhereInput | LieuWhereInput[]
    titre?: StringFilter<"Lieu"> | string
    description?: StringFilter<"Lieu"> | string
    type?: EnumLieuTypeFilter<"Lieu"> | $Enums.LieuType
    adresse?: StringFilter<"Lieu"> | string
    ville?: StringFilter<"Lieu"> | string
    code_postal?: StringFilter<"Lieu"> | string
    latitude?: FloatFilter<"Lieu"> | number
    longitude?: FloatFilter<"Lieu"> | number
    superficie?: IntNullableFilter<"Lieu"> | number | null
    accessibilite?: StringNullableFilter<"Lieu"> | string | null
    equipements?: StringNullableListFilter<"Lieu">
    restrictions?: StringNullableFilter<"Lieu"> | string | null
    prix_jour?: FloatFilter<"Lieu"> | number
    caution?: FloatFilter<"Lieu"> | number
    disponible?: BoolFilter<"Lieu"> | boolean
    instant_book?: BoolFilter<"Lieu"> | boolean
    images?: StringNullableListFilter<"Lieu">
    video_url?: StringNullableFilter<"Lieu"> | string | null
    proprietaire_id?: StringFilter<"Lieu"> | string
    statut?: EnumLieuStatutFilter<"Lieu"> | $Enums.LieuStatut
    verified?: BoolFilter<"Lieu"> | boolean
    created_at?: DateTimeFilter<"Lieu"> | Date | string
    updated_at?: DateTimeFilter<"Lieu"> | Date | string
    proprietaire?: XOR<UserScalarRelationFilter, UserWhereInput>
    reservations?: ReservationListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id">

  export type LieuOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    code_postal?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    superficie?: SortOrderInput | SortOrder
    accessibilite?: SortOrderInput | SortOrder
    equipements?: SortOrder
    restrictions?: SortOrderInput | SortOrder
    prix_jour?: SortOrder
    caution?: SortOrder
    disponible?: SortOrder
    instant_book?: SortOrder
    images?: SortOrder
    video_url?: SortOrderInput | SortOrder
    proprietaire_id?: SortOrder
    statut?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LieuCountOrderByAggregateInput
    _avg?: LieuAvgOrderByAggregateInput
    _max?: LieuMaxOrderByAggregateInput
    _min?: LieuMinOrderByAggregateInput
    _sum?: LieuSumOrderByAggregateInput
  }

  export type LieuScalarWhereWithAggregatesInput = {
    AND?: LieuScalarWhereWithAggregatesInput | LieuScalarWhereWithAggregatesInput[]
    OR?: LieuScalarWhereWithAggregatesInput[]
    NOT?: LieuScalarWhereWithAggregatesInput | LieuScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lieu"> | string
    titre?: StringWithAggregatesFilter<"Lieu"> | string
    description?: StringWithAggregatesFilter<"Lieu"> | string
    type?: EnumLieuTypeWithAggregatesFilter<"Lieu"> | $Enums.LieuType
    adresse?: StringWithAggregatesFilter<"Lieu"> | string
    ville?: StringWithAggregatesFilter<"Lieu"> | string
    code_postal?: StringWithAggregatesFilter<"Lieu"> | string
    latitude?: FloatWithAggregatesFilter<"Lieu"> | number
    longitude?: FloatWithAggregatesFilter<"Lieu"> | number
    superficie?: IntNullableWithAggregatesFilter<"Lieu"> | number | null
    accessibilite?: StringNullableWithAggregatesFilter<"Lieu"> | string | null
    equipements?: StringNullableListFilter<"Lieu">
    restrictions?: StringNullableWithAggregatesFilter<"Lieu"> | string | null
    prix_jour?: FloatWithAggregatesFilter<"Lieu"> | number
    caution?: FloatWithAggregatesFilter<"Lieu"> | number
    disponible?: BoolWithAggregatesFilter<"Lieu"> | boolean
    instant_book?: BoolWithAggregatesFilter<"Lieu"> | boolean
    images?: StringNullableListFilter<"Lieu">
    video_url?: StringNullableWithAggregatesFilter<"Lieu"> | string | null
    proprietaire_id?: StringWithAggregatesFilter<"Lieu"> | string
    statut?: EnumLieuStatutWithAggregatesFilter<"Lieu"> | $Enums.LieuStatut
    verified?: BoolWithAggregatesFilter<"Lieu"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Lieu"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Lieu"> | Date | string
  }

  export type ReservationWhereInput = {
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    id?: StringFilter<"Reservation"> | string
    date_debut?: DateTimeFilter<"Reservation"> | Date | string
    date_fin?: DateTimeFilter<"Reservation"> | Date | string
    nb_jours?: IntFilter<"Reservation"> | number
    locataire_id?: StringFilter<"Reservation"> | string
    lieu_id?: StringFilter<"Reservation"> | string
    type_projet?: StringFilter<"Reservation"> | string
    nb_personnes?: IntFilter<"Reservation"> | number
    description?: StringNullableFilter<"Reservation"> | string | null
    equipements_demandes?: StringNullableListFilter<"Reservation">
    prix_total?: FloatFilter<"Reservation"> | number
    caution?: FloatFilter<"Reservation"> | number
    commission?: FloatFilter<"Reservation"> | number
    statut?: EnumReservationStatutFilter<"Reservation"> | $Enums.ReservationStatut
    created_at?: DateTimeFilter<"Reservation"> | Date | string
    updated_at?: DateTimeFilter<"Reservation"> | Date | string
    confirme_at?: DateTimeNullableFilter<"Reservation"> | Date | string | null
    annule_at?: DateTimeNullableFilter<"Reservation"> | Date | string | null
    locataire?: XOR<UserScalarRelationFilter, UserWhereInput>
    lieu?: XOR<LieuScalarRelationFilter, LieuWhereInput>
    payments?: PaymentListRelationFilter
    review?: XOR<ReviewNullableScalarRelationFilter, ReviewWhereInput> | null
  }

  export type ReservationOrderByWithRelationInput = {
    id?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    nb_jours?: SortOrder
    locataire_id?: SortOrder
    lieu_id?: SortOrder
    type_projet?: SortOrder
    nb_personnes?: SortOrder
    description?: SortOrderInput | SortOrder
    equipements_demandes?: SortOrder
    prix_total?: SortOrder
    caution?: SortOrder
    commission?: SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    confirme_at?: SortOrderInput | SortOrder
    annule_at?: SortOrderInput | SortOrder
    locataire?: UserOrderByWithRelationInput
    lieu?: LieuOrderByWithRelationInput
    payments?: PaymentOrderByRelationAggregateInput
    review?: ReviewOrderByWithRelationInput
  }

  export type ReservationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    date_debut?: DateTimeFilter<"Reservation"> | Date | string
    date_fin?: DateTimeFilter<"Reservation"> | Date | string
    nb_jours?: IntFilter<"Reservation"> | number
    locataire_id?: StringFilter<"Reservation"> | string
    lieu_id?: StringFilter<"Reservation"> | string
    type_projet?: StringFilter<"Reservation"> | string
    nb_personnes?: IntFilter<"Reservation"> | number
    description?: StringNullableFilter<"Reservation"> | string | null
    equipements_demandes?: StringNullableListFilter<"Reservation">
    prix_total?: FloatFilter<"Reservation"> | number
    caution?: FloatFilter<"Reservation"> | number
    commission?: FloatFilter<"Reservation"> | number
    statut?: EnumReservationStatutFilter<"Reservation"> | $Enums.ReservationStatut
    created_at?: DateTimeFilter<"Reservation"> | Date | string
    updated_at?: DateTimeFilter<"Reservation"> | Date | string
    confirme_at?: DateTimeNullableFilter<"Reservation"> | Date | string | null
    annule_at?: DateTimeNullableFilter<"Reservation"> | Date | string | null
    locataire?: XOR<UserScalarRelationFilter, UserWhereInput>
    lieu?: XOR<LieuScalarRelationFilter, LieuWhereInput>
    payments?: PaymentListRelationFilter
    review?: XOR<ReviewNullableScalarRelationFilter, ReviewWhereInput> | null
  }, "id">

  export type ReservationOrderByWithAggregationInput = {
    id?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    nb_jours?: SortOrder
    locataire_id?: SortOrder
    lieu_id?: SortOrder
    type_projet?: SortOrder
    nb_personnes?: SortOrder
    description?: SortOrderInput | SortOrder
    equipements_demandes?: SortOrder
    prix_total?: SortOrder
    caution?: SortOrder
    commission?: SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    confirme_at?: SortOrderInput | SortOrder
    annule_at?: SortOrderInput | SortOrder
    _count?: ReservationCountOrderByAggregateInput
    _avg?: ReservationAvgOrderByAggregateInput
    _max?: ReservationMaxOrderByAggregateInput
    _min?: ReservationMinOrderByAggregateInput
    _sum?: ReservationSumOrderByAggregateInput
  }

  export type ReservationScalarWhereWithAggregatesInput = {
    AND?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    OR?: ReservationScalarWhereWithAggregatesInput[]
    NOT?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reservation"> | string
    date_debut?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    date_fin?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    nb_jours?: IntWithAggregatesFilter<"Reservation"> | number
    locataire_id?: StringWithAggregatesFilter<"Reservation"> | string
    lieu_id?: StringWithAggregatesFilter<"Reservation"> | string
    type_projet?: StringWithAggregatesFilter<"Reservation"> | string
    nb_personnes?: IntWithAggregatesFilter<"Reservation"> | number
    description?: StringNullableWithAggregatesFilter<"Reservation"> | string | null
    equipements_demandes?: StringNullableListFilter<"Reservation">
    prix_total?: FloatWithAggregatesFilter<"Reservation"> | number
    caution?: FloatWithAggregatesFilter<"Reservation"> | number
    commission?: FloatWithAggregatesFilter<"Reservation"> | number
    statut?: EnumReservationStatutWithAggregatesFilter<"Reservation"> | $Enums.ReservationStatut
    created_at?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    confirme_at?: DateTimeNullableWithAggregatesFilter<"Reservation"> | Date | string | null
    annule_at?: DateTimeNullableWithAggregatesFilter<"Reservation"> | Date | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    reservation_id?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    commission?: FloatFilter<"Payment"> | number
    type?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
    stripe_payment_intent_id?: StringNullableFilter<"Payment"> | string | null
    stripe_transfer_id?: StringNullableFilter<"Payment"> | string | null
    statut?: EnumPaymentStatutFilter<"Payment"> | $Enums.PaymentStatut
    created_at?: DateTimeFilter<"Payment"> | Date | string
    processed_at?: DateTimeNullableFilter<"Payment"> | Date | string | null
    reservation?: XOR<ReservationScalarRelationFilter, ReservationWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    commission?: SortOrder
    type?: SortOrder
    stripe_payment_intent_id?: SortOrderInput | SortOrder
    stripe_transfer_id?: SortOrderInput | SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    processed_at?: SortOrderInput | SortOrder
    reservation?: ReservationOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    reservation_id?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    commission?: FloatFilter<"Payment"> | number
    type?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
    stripe_payment_intent_id?: StringNullableFilter<"Payment"> | string | null
    stripe_transfer_id?: StringNullableFilter<"Payment"> | string | null
    statut?: EnumPaymentStatutFilter<"Payment"> | $Enums.PaymentStatut
    created_at?: DateTimeFilter<"Payment"> | Date | string
    processed_at?: DateTimeNullableFilter<"Payment"> | Date | string | null
    reservation?: XOR<ReservationScalarRelationFilter, ReservationWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    commission?: SortOrder
    type?: SortOrder
    stripe_payment_intent_id?: SortOrderInput | SortOrder
    stripe_transfer_id?: SortOrderInput | SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    processed_at?: SortOrderInput | SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    reservation_id?: StringWithAggregatesFilter<"Payment"> | string
    amount?: FloatWithAggregatesFilter<"Payment"> | number
    commission?: FloatWithAggregatesFilter<"Payment"> | number
    type?: EnumPaymentTypeWithAggregatesFilter<"Payment"> | $Enums.PaymentType
    stripe_payment_intent_id?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    stripe_transfer_id?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    statut?: EnumPaymentStatutWithAggregatesFilter<"Payment"> | $Enums.PaymentStatut
    created_at?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    processed_at?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    reservation_id?: StringFilter<"Review"> | string
    auteur_id?: StringFilter<"Review"> | string
    target_id?: StringFilter<"Review"> | string
    lieu_id?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    commentaire?: StringNullableFilter<"Review"> | string | null
    created_at?: DateTimeFilter<"Review"> | Date | string
    reservation?: XOR<ReservationScalarRelationFilter, ReservationWhereInput>
    auteur?: XOR<UserScalarRelationFilter, UserWhereInput>
    target?: XOR<UserScalarRelationFilter, UserWhereInput>
    lieu?: XOR<LieuScalarRelationFilter, LieuWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    auteur_id?: SortOrder
    target_id?: SortOrder
    lieu_id?: SortOrder
    rating?: SortOrder
    commentaire?: SortOrderInput | SortOrder
    created_at?: SortOrder
    reservation?: ReservationOrderByWithRelationInput
    auteur?: UserOrderByWithRelationInput
    target?: UserOrderByWithRelationInput
    lieu?: LieuOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    reservation_id?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    auteur_id?: StringFilter<"Review"> | string
    target_id?: StringFilter<"Review"> | string
    lieu_id?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    commentaire?: StringNullableFilter<"Review"> | string | null
    created_at?: DateTimeFilter<"Review"> | Date | string
    reservation?: XOR<ReservationScalarRelationFilter, ReservationWhereInput>
    auteur?: XOR<UserScalarRelationFilter, UserWhereInput>
    target?: XOR<UserScalarRelationFilter, UserWhereInput>
    lieu?: XOR<LieuScalarRelationFilter, LieuWhereInput>
  }, "id" | "reservation_id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    auteur_id?: SortOrder
    target_id?: SortOrder
    lieu_id?: SortOrder
    rating?: SortOrder
    commentaire?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    reservation_id?: StringWithAggregatesFilter<"Review"> | string
    auteur_id?: StringWithAggregatesFilter<"Review"> | string
    target_id?: StringWithAggregatesFilter<"Review"> | string
    lieu_id?: StringWithAggregatesFilter<"Review"> | string
    rating?: IntWithAggregatesFilter<"Review"> | number
    commentaire?: StringNullableWithAggregatesFilter<"Review"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    lieux?: LieuCreateNestedManyWithoutProprietaireInput
    reservations?: ReservationCreateNestedManyWithoutLocataireInput
    reviews_donnees?: ReviewCreateNestedManyWithoutAuteurInput
    reviews_recues?: ReviewCreateNestedManyWithoutTargetInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    lieux?: LieuUncheckedCreateNestedManyWithoutProprietaireInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutLocataireInput
    reviews_donnees?: ReviewUncheckedCreateNestedManyWithoutAuteurInput
    reviews_recues?: ReviewUncheckedCreateNestedManyWithoutTargetInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lieux?: LieuUpdateManyWithoutProprietaireNestedInput
    reservations?: ReservationUpdateManyWithoutLocataireNestedInput
    reviews_donnees?: ReviewUpdateManyWithoutAuteurNestedInput
    reviews_recues?: ReviewUpdateManyWithoutTargetNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lieux?: LieuUncheckedUpdateManyWithoutProprietaireNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutLocataireNestedInput
    reviews_donnees?: ReviewUncheckedUpdateManyWithoutAuteurNestedInput
    reviews_recues?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LieuCreateInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    proprietaire: UserCreateNestedOneWithoutLieuxInput
    reservations?: ReservationCreateNestedManyWithoutLieuInput
    reviews?: ReviewCreateNestedManyWithoutLieuInput
  }

  export type LieuUncheckedCreateInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    proprietaire_id: string
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    reservations?: ReservationUncheckedCreateNestedManyWithoutLieuInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutLieuInput
  }

  export type LieuUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    proprietaire?: UserUpdateOneRequiredWithoutLieuxNestedInput
    reservations?: ReservationUpdateManyWithoutLieuNestedInput
    reviews?: ReviewUpdateManyWithoutLieuNestedInput
  }

  export type LieuUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    proprietaire_id?: StringFieldUpdateOperationsInput | string
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservations?: ReservationUncheckedUpdateManyWithoutLieuNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutLieuNestedInput
  }

  export type LieuCreateManyInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    proprietaire_id: string
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LieuUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LieuUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    proprietaire_id?: StringFieldUpdateOperationsInput | string
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationCreateInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    locataire: UserCreateNestedOneWithoutReservationsInput
    lieu: LieuCreateNestedOneWithoutReservationsInput
    payments?: PaymentCreateNestedManyWithoutReservationInput
    review?: ReviewCreateNestedOneWithoutReservationInput
  }

  export type ReservationUncheckedCreateInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    locataire_id: string
    lieu_id: string
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutReservationInput
    review?: ReviewUncheckedCreateNestedOneWithoutReservationInput
  }

  export type ReservationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locataire?: UserUpdateOneRequiredWithoutReservationsNestedInput
    lieu?: LieuUpdateOneRequiredWithoutReservationsNestedInput
    payments?: PaymentUpdateManyWithoutReservationNestedInput
    review?: ReviewUpdateOneWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    locataire_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutReservationNestedInput
    review?: ReviewUncheckedUpdateOneWithoutReservationNestedInput
  }

  export type ReservationCreateManyInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    locataire_id: string
    lieu_id: string
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
  }

  export type ReservationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReservationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    locataire_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentCreateInput = {
    id?: string
    amount: number
    commission: number
    type: $Enums.PaymentType
    stripe_payment_intent_id?: string | null
    stripe_transfer_id?: string | null
    statut?: $Enums.PaymentStatut
    created_at?: Date | string
    processed_at?: Date | string | null
    reservation: ReservationCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    reservation_id: string
    amount: number
    commission: number
    type: $Enums.PaymentType
    stripe_payment_intent_id?: string | null
    stripe_transfer_id?: string | null
    statut?: $Enums.PaymentStatut
    created_at?: Date | string
    processed_at?: Date | string | null
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    stripe_payment_intent_id?: NullableStringFieldUpdateOperationsInput | string | null
    stripe_transfer_id?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumPaymentStatutFieldUpdateOperationsInput | $Enums.PaymentStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reservation?: ReservationUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    stripe_payment_intent_id?: NullableStringFieldUpdateOperationsInput | string | null
    stripe_transfer_id?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumPaymentStatutFieldUpdateOperationsInput | $Enums.PaymentStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentCreateManyInput = {
    id?: string
    reservation_id: string
    amount: number
    commission: number
    type: $Enums.PaymentType
    stripe_payment_intent_id?: string | null
    stripe_transfer_id?: string | null
    statut?: $Enums.PaymentStatut
    created_at?: Date | string
    processed_at?: Date | string | null
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    stripe_payment_intent_id?: NullableStringFieldUpdateOperationsInput | string | null
    stripe_transfer_id?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumPaymentStatutFieldUpdateOperationsInput | $Enums.PaymentStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    stripe_payment_intent_id?: NullableStringFieldUpdateOperationsInput | string | null
    stripe_transfer_id?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumPaymentStatutFieldUpdateOperationsInput | $Enums.PaymentStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewCreateInput = {
    id?: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
    reservation: ReservationCreateNestedOneWithoutReviewInput
    auteur: UserCreateNestedOneWithoutReviews_donneesInput
    target: UserCreateNestedOneWithoutReviews_recuesInput
    lieu: LieuCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    reservation_id: string
    auteur_id: string
    target_id: string
    lieu_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type ReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: ReservationUpdateOneRequiredWithoutReviewNestedInput
    auteur?: UserUpdateOneRequiredWithoutReviews_donneesNestedInput
    target?: UserUpdateOneRequiredWithoutReviews_recuesNestedInput
    lieu?: LieuUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    auteur_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: string
    reservation_id: string
    auteur_id: string
    target_id: string
    lieu_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    auteur_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LieuListRelationFilter = {
    every?: LieuWhereInput
    some?: LieuWhereInput
    none?: LieuWhereInput
  }

  export type ReservationListRelationFilter = {
    every?: ReservationWhereInput
    some?: ReservationWhereInput
    none?: ReservationWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LieuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    active?: SortOrder
    stripe_customer_id?: SortOrder
    premium_until?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    active?: SortOrder
    stripe_customer_id?: SortOrder
    premium_until?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    telephone?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    active?: SortOrder
    stripe_customer_id?: SortOrder
    premium_until?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumLieuTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LieuType | EnumLieuTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LieuType[] | ListEnumLieuTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LieuType[] | ListEnumLieuTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLieuTypeFilter<$PrismaModel> | $Enums.LieuType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumLieuStatutFilter<$PrismaModel = never> = {
    equals?: $Enums.LieuStatut | EnumLieuStatutFieldRefInput<$PrismaModel>
    in?: $Enums.LieuStatut[] | ListEnumLieuStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.LieuStatut[] | ListEnumLieuStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumLieuStatutFilter<$PrismaModel> | $Enums.LieuStatut
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LieuCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    code_postal?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    superficie?: SortOrder
    accessibilite?: SortOrder
    equipements?: SortOrder
    restrictions?: SortOrder
    prix_jour?: SortOrder
    caution?: SortOrder
    disponible?: SortOrder
    instant_book?: SortOrder
    images?: SortOrder
    video_url?: SortOrder
    proprietaire_id?: SortOrder
    statut?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LieuAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    superficie?: SortOrder
    prix_jour?: SortOrder
    caution?: SortOrder
  }

  export type LieuMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    code_postal?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    superficie?: SortOrder
    accessibilite?: SortOrder
    restrictions?: SortOrder
    prix_jour?: SortOrder
    caution?: SortOrder
    disponible?: SortOrder
    instant_book?: SortOrder
    video_url?: SortOrder
    proprietaire_id?: SortOrder
    statut?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LieuMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    description?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    ville?: SortOrder
    code_postal?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    superficie?: SortOrder
    accessibilite?: SortOrder
    restrictions?: SortOrder
    prix_jour?: SortOrder
    caution?: SortOrder
    disponible?: SortOrder
    instant_book?: SortOrder
    video_url?: SortOrder
    proprietaire_id?: SortOrder
    statut?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LieuSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    superficie?: SortOrder
    prix_jour?: SortOrder
    caution?: SortOrder
  }

  export type EnumLieuTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LieuType | EnumLieuTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LieuType[] | ListEnumLieuTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LieuType[] | ListEnumLieuTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLieuTypeWithAggregatesFilter<$PrismaModel> | $Enums.LieuType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLieuTypeFilter<$PrismaModel>
    _max?: NestedEnumLieuTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumLieuStatutWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LieuStatut | EnumLieuStatutFieldRefInput<$PrismaModel>
    in?: $Enums.LieuStatut[] | ListEnumLieuStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.LieuStatut[] | ListEnumLieuStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumLieuStatutWithAggregatesFilter<$PrismaModel> | $Enums.LieuStatut
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLieuStatutFilter<$PrismaModel>
    _max?: NestedEnumLieuStatutFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumReservationStatutFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatut | EnumReservationStatutFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatut[] | ListEnumReservationStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatut[] | ListEnumReservationStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatutFilter<$PrismaModel> | $Enums.ReservationStatut
  }

  export type LieuScalarRelationFilter = {
    is?: LieuWhereInput
    isNot?: LieuWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type ReviewNullableScalarRelationFilter = {
    is?: ReviewWhereInput | null
    isNot?: ReviewWhereInput | null
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservationCountOrderByAggregateInput = {
    id?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    nb_jours?: SortOrder
    locataire_id?: SortOrder
    lieu_id?: SortOrder
    type_projet?: SortOrder
    nb_personnes?: SortOrder
    description?: SortOrder
    equipements_demandes?: SortOrder
    prix_total?: SortOrder
    caution?: SortOrder
    commission?: SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    confirme_at?: SortOrder
    annule_at?: SortOrder
  }

  export type ReservationAvgOrderByAggregateInput = {
    nb_jours?: SortOrder
    nb_personnes?: SortOrder
    prix_total?: SortOrder
    caution?: SortOrder
    commission?: SortOrder
  }

  export type ReservationMaxOrderByAggregateInput = {
    id?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    nb_jours?: SortOrder
    locataire_id?: SortOrder
    lieu_id?: SortOrder
    type_projet?: SortOrder
    nb_personnes?: SortOrder
    description?: SortOrder
    prix_total?: SortOrder
    caution?: SortOrder
    commission?: SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    confirme_at?: SortOrder
    annule_at?: SortOrder
  }

  export type ReservationMinOrderByAggregateInput = {
    id?: SortOrder
    date_debut?: SortOrder
    date_fin?: SortOrder
    nb_jours?: SortOrder
    locataire_id?: SortOrder
    lieu_id?: SortOrder
    type_projet?: SortOrder
    nb_personnes?: SortOrder
    description?: SortOrder
    prix_total?: SortOrder
    caution?: SortOrder
    commission?: SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    confirme_at?: SortOrder
    annule_at?: SortOrder
  }

  export type ReservationSumOrderByAggregateInput = {
    nb_jours?: SortOrder
    nb_personnes?: SortOrder
    prix_total?: SortOrder
    caution?: SortOrder
    commission?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumReservationStatutWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatut | EnumReservationStatutFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatut[] | ListEnumReservationStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatut[] | ListEnumReservationStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatutWithAggregatesFilter<$PrismaModel> | $Enums.ReservationStatut
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReservationStatutFilter<$PrismaModel>
    _max?: NestedEnumReservationStatutFilter<$PrismaModel>
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type EnumPaymentStatutFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatut | EnumPaymentStatutFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatut[] | ListEnumPaymentStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatut[] | ListEnumPaymentStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatutFilter<$PrismaModel> | $Enums.PaymentStatut
  }

  export type ReservationScalarRelationFilter = {
    is?: ReservationWhereInput
    isNot?: ReservationWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    commission?: SortOrder
    type?: SortOrder
    stripe_payment_intent_id?: SortOrder
    stripe_transfer_id?: SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    processed_at?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
    commission?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    commission?: SortOrder
    type?: SortOrder
    stripe_payment_intent_id?: SortOrder
    stripe_transfer_id?: SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    processed_at?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    commission?: SortOrder
    type?: SortOrder
    stripe_payment_intent_id?: SortOrder
    stripe_transfer_id?: SortOrder
    statut?: SortOrder
    created_at?: SortOrder
    processed_at?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
    commission?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type EnumPaymentStatutWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatut | EnumPaymentStatutFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatut[] | ListEnumPaymentStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatut[] | ListEnumPaymentStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatutWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatut
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatutFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatutFilter<$PrismaModel>
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    auteur_id?: SortOrder
    target_id?: SortOrder
    lieu_id?: SortOrder
    rating?: SortOrder
    commentaire?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    auteur_id?: SortOrder
    target_id?: SortOrder
    lieu_id?: SortOrder
    rating?: SortOrder
    commentaire?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    auteur_id?: SortOrder
    target_id?: SortOrder
    lieu_id?: SortOrder
    rating?: SortOrder
    commentaire?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type LieuCreateNestedManyWithoutProprietaireInput = {
    create?: XOR<LieuCreateWithoutProprietaireInput, LieuUncheckedCreateWithoutProprietaireInput> | LieuCreateWithoutProprietaireInput[] | LieuUncheckedCreateWithoutProprietaireInput[]
    connectOrCreate?: LieuCreateOrConnectWithoutProprietaireInput | LieuCreateOrConnectWithoutProprietaireInput[]
    createMany?: LieuCreateManyProprietaireInputEnvelope
    connect?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
  }

  export type ReservationCreateNestedManyWithoutLocataireInput = {
    create?: XOR<ReservationCreateWithoutLocataireInput, ReservationUncheckedCreateWithoutLocataireInput> | ReservationCreateWithoutLocataireInput[] | ReservationUncheckedCreateWithoutLocataireInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutLocataireInput | ReservationCreateOrConnectWithoutLocataireInput[]
    createMany?: ReservationCreateManyLocataireInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutAuteurInput = {
    create?: XOR<ReviewCreateWithoutAuteurInput, ReviewUncheckedCreateWithoutAuteurInput> | ReviewCreateWithoutAuteurInput[] | ReviewUncheckedCreateWithoutAuteurInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAuteurInput | ReviewCreateOrConnectWithoutAuteurInput[]
    createMany?: ReviewCreateManyAuteurInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutTargetInput = {
    create?: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput> | ReviewCreateWithoutTargetInput[] | ReviewUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutTargetInput | ReviewCreateOrConnectWithoutTargetInput[]
    createMany?: ReviewCreateManyTargetInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type LieuUncheckedCreateNestedManyWithoutProprietaireInput = {
    create?: XOR<LieuCreateWithoutProprietaireInput, LieuUncheckedCreateWithoutProprietaireInput> | LieuCreateWithoutProprietaireInput[] | LieuUncheckedCreateWithoutProprietaireInput[]
    connectOrCreate?: LieuCreateOrConnectWithoutProprietaireInput | LieuCreateOrConnectWithoutProprietaireInput[]
    createMany?: LieuCreateManyProprietaireInputEnvelope
    connect?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutLocataireInput = {
    create?: XOR<ReservationCreateWithoutLocataireInput, ReservationUncheckedCreateWithoutLocataireInput> | ReservationCreateWithoutLocataireInput[] | ReservationUncheckedCreateWithoutLocataireInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutLocataireInput | ReservationCreateOrConnectWithoutLocataireInput[]
    createMany?: ReservationCreateManyLocataireInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutAuteurInput = {
    create?: XOR<ReviewCreateWithoutAuteurInput, ReviewUncheckedCreateWithoutAuteurInput> | ReviewCreateWithoutAuteurInput[] | ReviewUncheckedCreateWithoutAuteurInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAuteurInput | ReviewCreateOrConnectWithoutAuteurInput[]
    createMany?: ReviewCreateManyAuteurInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutTargetInput = {
    create?: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput> | ReviewCreateWithoutTargetInput[] | ReviewUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutTargetInput | ReviewCreateOrConnectWithoutTargetInput[]
    createMany?: ReviewCreateManyTargetInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LieuUpdateManyWithoutProprietaireNestedInput = {
    create?: XOR<LieuCreateWithoutProprietaireInput, LieuUncheckedCreateWithoutProprietaireInput> | LieuCreateWithoutProprietaireInput[] | LieuUncheckedCreateWithoutProprietaireInput[]
    connectOrCreate?: LieuCreateOrConnectWithoutProprietaireInput | LieuCreateOrConnectWithoutProprietaireInput[]
    upsert?: LieuUpsertWithWhereUniqueWithoutProprietaireInput | LieuUpsertWithWhereUniqueWithoutProprietaireInput[]
    createMany?: LieuCreateManyProprietaireInputEnvelope
    set?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
    disconnect?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
    delete?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
    connect?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
    update?: LieuUpdateWithWhereUniqueWithoutProprietaireInput | LieuUpdateWithWhereUniqueWithoutProprietaireInput[]
    updateMany?: LieuUpdateManyWithWhereWithoutProprietaireInput | LieuUpdateManyWithWhereWithoutProprietaireInput[]
    deleteMany?: LieuScalarWhereInput | LieuScalarWhereInput[]
  }

  export type ReservationUpdateManyWithoutLocataireNestedInput = {
    create?: XOR<ReservationCreateWithoutLocataireInput, ReservationUncheckedCreateWithoutLocataireInput> | ReservationCreateWithoutLocataireInput[] | ReservationUncheckedCreateWithoutLocataireInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutLocataireInput | ReservationCreateOrConnectWithoutLocataireInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutLocataireInput | ReservationUpsertWithWhereUniqueWithoutLocataireInput[]
    createMany?: ReservationCreateManyLocataireInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutLocataireInput | ReservationUpdateWithWhereUniqueWithoutLocataireInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutLocataireInput | ReservationUpdateManyWithWhereWithoutLocataireInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutAuteurNestedInput = {
    create?: XOR<ReviewCreateWithoutAuteurInput, ReviewUncheckedCreateWithoutAuteurInput> | ReviewCreateWithoutAuteurInput[] | ReviewUncheckedCreateWithoutAuteurInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAuteurInput | ReviewCreateOrConnectWithoutAuteurInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAuteurInput | ReviewUpsertWithWhereUniqueWithoutAuteurInput[]
    createMany?: ReviewCreateManyAuteurInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAuteurInput | ReviewUpdateWithWhereUniqueWithoutAuteurInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAuteurInput | ReviewUpdateManyWithWhereWithoutAuteurInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutTargetNestedInput = {
    create?: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput> | ReviewCreateWithoutTargetInput[] | ReviewUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutTargetInput | ReviewCreateOrConnectWithoutTargetInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutTargetInput | ReviewUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: ReviewCreateManyTargetInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutTargetInput | ReviewUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutTargetInput | ReviewUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type LieuUncheckedUpdateManyWithoutProprietaireNestedInput = {
    create?: XOR<LieuCreateWithoutProprietaireInput, LieuUncheckedCreateWithoutProprietaireInput> | LieuCreateWithoutProprietaireInput[] | LieuUncheckedCreateWithoutProprietaireInput[]
    connectOrCreate?: LieuCreateOrConnectWithoutProprietaireInput | LieuCreateOrConnectWithoutProprietaireInput[]
    upsert?: LieuUpsertWithWhereUniqueWithoutProprietaireInput | LieuUpsertWithWhereUniqueWithoutProprietaireInput[]
    createMany?: LieuCreateManyProprietaireInputEnvelope
    set?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
    disconnect?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
    delete?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
    connect?: LieuWhereUniqueInput | LieuWhereUniqueInput[]
    update?: LieuUpdateWithWhereUniqueWithoutProprietaireInput | LieuUpdateWithWhereUniqueWithoutProprietaireInput[]
    updateMany?: LieuUpdateManyWithWhereWithoutProprietaireInput | LieuUpdateManyWithWhereWithoutProprietaireInput[]
    deleteMany?: LieuScalarWhereInput | LieuScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutLocataireNestedInput = {
    create?: XOR<ReservationCreateWithoutLocataireInput, ReservationUncheckedCreateWithoutLocataireInput> | ReservationCreateWithoutLocataireInput[] | ReservationUncheckedCreateWithoutLocataireInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutLocataireInput | ReservationCreateOrConnectWithoutLocataireInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutLocataireInput | ReservationUpsertWithWhereUniqueWithoutLocataireInput[]
    createMany?: ReservationCreateManyLocataireInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutLocataireInput | ReservationUpdateWithWhereUniqueWithoutLocataireInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutLocataireInput | ReservationUpdateManyWithWhereWithoutLocataireInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutAuteurNestedInput = {
    create?: XOR<ReviewCreateWithoutAuteurInput, ReviewUncheckedCreateWithoutAuteurInput> | ReviewCreateWithoutAuteurInput[] | ReviewUncheckedCreateWithoutAuteurInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAuteurInput | ReviewCreateOrConnectWithoutAuteurInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAuteurInput | ReviewUpsertWithWhereUniqueWithoutAuteurInput[]
    createMany?: ReviewCreateManyAuteurInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAuteurInput | ReviewUpdateWithWhereUniqueWithoutAuteurInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAuteurInput | ReviewUpdateManyWithWhereWithoutAuteurInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutTargetNestedInput = {
    create?: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput> | ReviewCreateWithoutTargetInput[] | ReviewUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutTargetInput | ReviewCreateOrConnectWithoutTargetInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutTargetInput | ReviewUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: ReviewCreateManyTargetInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutTargetInput | ReviewUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutTargetInput | ReviewUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type LieuCreateequipementsInput = {
    set: string[]
  }

  export type LieuCreateimagesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutLieuxInput = {
    create?: XOR<UserCreateWithoutLieuxInput, UserUncheckedCreateWithoutLieuxInput>
    connectOrCreate?: UserCreateOrConnectWithoutLieuxInput
    connect?: UserWhereUniqueInput
  }

  export type ReservationCreateNestedManyWithoutLieuInput = {
    create?: XOR<ReservationCreateWithoutLieuInput, ReservationUncheckedCreateWithoutLieuInput> | ReservationCreateWithoutLieuInput[] | ReservationUncheckedCreateWithoutLieuInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutLieuInput | ReservationCreateOrConnectWithoutLieuInput[]
    createMany?: ReservationCreateManyLieuInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutLieuInput = {
    create?: XOR<ReviewCreateWithoutLieuInput, ReviewUncheckedCreateWithoutLieuInput> | ReviewCreateWithoutLieuInput[] | ReviewUncheckedCreateWithoutLieuInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutLieuInput | ReviewCreateOrConnectWithoutLieuInput[]
    createMany?: ReviewCreateManyLieuInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutLieuInput = {
    create?: XOR<ReservationCreateWithoutLieuInput, ReservationUncheckedCreateWithoutLieuInput> | ReservationCreateWithoutLieuInput[] | ReservationUncheckedCreateWithoutLieuInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutLieuInput | ReservationCreateOrConnectWithoutLieuInput[]
    createMany?: ReservationCreateManyLieuInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutLieuInput = {
    create?: XOR<ReviewCreateWithoutLieuInput, ReviewUncheckedCreateWithoutLieuInput> | ReviewCreateWithoutLieuInput[] | ReviewUncheckedCreateWithoutLieuInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutLieuInput | ReviewCreateOrConnectWithoutLieuInput[]
    createMany?: ReviewCreateManyLieuInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type EnumLieuTypeFieldUpdateOperationsInput = {
    set?: $Enums.LieuType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LieuUpdateequipementsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type LieuUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumLieuStatutFieldUpdateOperationsInput = {
    set?: $Enums.LieuStatut
  }

  export type UserUpdateOneRequiredWithoutLieuxNestedInput = {
    create?: XOR<UserCreateWithoutLieuxInput, UserUncheckedCreateWithoutLieuxInput>
    connectOrCreate?: UserCreateOrConnectWithoutLieuxInput
    upsert?: UserUpsertWithoutLieuxInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLieuxInput, UserUpdateWithoutLieuxInput>, UserUncheckedUpdateWithoutLieuxInput>
  }

  export type ReservationUpdateManyWithoutLieuNestedInput = {
    create?: XOR<ReservationCreateWithoutLieuInput, ReservationUncheckedCreateWithoutLieuInput> | ReservationCreateWithoutLieuInput[] | ReservationUncheckedCreateWithoutLieuInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutLieuInput | ReservationCreateOrConnectWithoutLieuInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutLieuInput | ReservationUpsertWithWhereUniqueWithoutLieuInput[]
    createMany?: ReservationCreateManyLieuInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutLieuInput | ReservationUpdateWithWhereUniqueWithoutLieuInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutLieuInput | ReservationUpdateManyWithWhereWithoutLieuInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutLieuNestedInput = {
    create?: XOR<ReviewCreateWithoutLieuInput, ReviewUncheckedCreateWithoutLieuInput> | ReviewCreateWithoutLieuInput[] | ReviewUncheckedCreateWithoutLieuInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutLieuInput | ReviewCreateOrConnectWithoutLieuInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutLieuInput | ReviewUpsertWithWhereUniqueWithoutLieuInput[]
    createMany?: ReviewCreateManyLieuInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutLieuInput | ReviewUpdateWithWhereUniqueWithoutLieuInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutLieuInput | ReviewUpdateManyWithWhereWithoutLieuInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutLieuNestedInput = {
    create?: XOR<ReservationCreateWithoutLieuInput, ReservationUncheckedCreateWithoutLieuInput> | ReservationCreateWithoutLieuInput[] | ReservationUncheckedCreateWithoutLieuInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutLieuInput | ReservationCreateOrConnectWithoutLieuInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutLieuInput | ReservationUpsertWithWhereUniqueWithoutLieuInput[]
    createMany?: ReservationCreateManyLieuInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutLieuInput | ReservationUpdateWithWhereUniqueWithoutLieuInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutLieuInput | ReservationUpdateManyWithWhereWithoutLieuInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutLieuNestedInput = {
    create?: XOR<ReviewCreateWithoutLieuInput, ReviewUncheckedCreateWithoutLieuInput> | ReviewCreateWithoutLieuInput[] | ReviewUncheckedCreateWithoutLieuInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutLieuInput | ReviewCreateOrConnectWithoutLieuInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutLieuInput | ReviewUpsertWithWhereUniqueWithoutLieuInput[]
    createMany?: ReviewCreateManyLieuInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutLieuInput | ReviewUpdateWithWhereUniqueWithoutLieuInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutLieuInput | ReviewUpdateManyWithWhereWithoutLieuInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReservationCreateequipements_demandesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutReservationsInput = {
    create?: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReservationsInput
    connect?: UserWhereUniqueInput
  }

  export type LieuCreateNestedOneWithoutReservationsInput = {
    create?: XOR<LieuCreateWithoutReservationsInput, LieuUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: LieuCreateOrConnectWithoutReservationsInput
    connect?: LieuWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutReservationInput = {
    create?: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput> | PaymentCreateWithoutReservationInput[] | PaymentUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReservationInput | PaymentCreateOrConnectWithoutReservationInput[]
    createMany?: PaymentCreateManyReservationInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type ReviewCreateNestedOneWithoutReservationInput = {
    create?: XOR<ReviewCreateWithoutReservationInput, ReviewUncheckedCreateWithoutReservationInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReservationInput
    connect?: ReviewWhereUniqueInput
  }

  export type PaymentUncheckedCreateNestedManyWithoutReservationInput = {
    create?: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput> | PaymentCreateWithoutReservationInput[] | PaymentUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReservationInput | PaymentCreateOrConnectWithoutReservationInput[]
    createMany?: PaymentCreateManyReservationInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedOneWithoutReservationInput = {
    create?: XOR<ReviewCreateWithoutReservationInput, ReviewUncheckedCreateWithoutReservationInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReservationInput
    connect?: ReviewWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReservationUpdateequipements_demandesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumReservationStatutFieldUpdateOperationsInput = {
    set?: $Enums.ReservationStatut
  }

  export type UserUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReservationsInput
    upsert?: UserUpsertWithoutReservationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReservationsInput, UserUpdateWithoutReservationsInput>, UserUncheckedUpdateWithoutReservationsInput>
  }

  export type LieuUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<LieuCreateWithoutReservationsInput, LieuUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: LieuCreateOrConnectWithoutReservationsInput
    upsert?: LieuUpsertWithoutReservationsInput
    connect?: LieuWhereUniqueInput
    update?: XOR<XOR<LieuUpdateToOneWithWhereWithoutReservationsInput, LieuUpdateWithoutReservationsInput>, LieuUncheckedUpdateWithoutReservationsInput>
  }

  export type PaymentUpdateManyWithoutReservationNestedInput = {
    create?: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput> | PaymentCreateWithoutReservationInput[] | PaymentUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReservationInput | PaymentCreateOrConnectWithoutReservationInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutReservationInput | PaymentUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: PaymentCreateManyReservationInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutReservationInput | PaymentUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutReservationInput | PaymentUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ReviewUpdateOneWithoutReservationNestedInput = {
    create?: XOR<ReviewCreateWithoutReservationInput, ReviewUncheckedCreateWithoutReservationInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReservationInput
    upsert?: ReviewUpsertWithoutReservationInput
    disconnect?: ReviewWhereInput | boolean
    delete?: ReviewWhereInput | boolean
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReservationInput, ReviewUpdateWithoutReservationInput>, ReviewUncheckedUpdateWithoutReservationInput>
  }

  export type PaymentUncheckedUpdateManyWithoutReservationNestedInput = {
    create?: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput> | PaymentCreateWithoutReservationInput[] | PaymentUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReservationInput | PaymentCreateOrConnectWithoutReservationInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutReservationInput | PaymentUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: PaymentCreateManyReservationInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutReservationInput | PaymentUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutReservationInput | PaymentUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateOneWithoutReservationNestedInput = {
    create?: XOR<ReviewCreateWithoutReservationInput, ReviewUncheckedCreateWithoutReservationInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReservationInput
    upsert?: ReviewUpsertWithoutReservationInput
    disconnect?: ReviewWhereInput | boolean
    delete?: ReviewWhereInput | boolean
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReservationInput, ReviewUpdateWithoutReservationInput>, ReviewUncheckedUpdateWithoutReservationInput>
  }

  export type ReservationCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<ReservationCreateWithoutPaymentsInput, ReservationUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutPaymentsInput
    connect?: ReservationWhereUniqueInput
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type EnumPaymentStatutFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatut
  }

  export type ReservationUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<ReservationCreateWithoutPaymentsInput, ReservationUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutPaymentsInput
    upsert?: ReservationUpsertWithoutPaymentsInput
    connect?: ReservationWhereUniqueInput
    update?: XOR<XOR<ReservationUpdateToOneWithWhereWithoutPaymentsInput, ReservationUpdateWithoutPaymentsInput>, ReservationUncheckedUpdateWithoutPaymentsInput>
  }

  export type ReservationCreateNestedOneWithoutReviewInput = {
    create?: XOR<ReservationCreateWithoutReviewInput, ReservationUncheckedCreateWithoutReviewInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutReviewInput
    connect?: ReservationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviews_donneesInput = {
    create?: XOR<UserCreateWithoutReviews_donneesInput, UserUncheckedCreateWithoutReviews_donneesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviews_donneesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviews_recuesInput = {
    create?: XOR<UserCreateWithoutReviews_recuesInput, UserUncheckedCreateWithoutReviews_recuesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviews_recuesInput
    connect?: UserWhereUniqueInput
  }

  export type LieuCreateNestedOneWithoutReviewsInput = {
    create?: XOR<LieuCreateWithoutReviewsInput, LieuUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: LieuCreateOrConnectWithoutReviewsInput
    connect?: LieuWhereUniqueInput
  }

  export type ReservationUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<ReservationCreateWithoutReviewInput, ReservationUncheckedCreateWithoutReviewInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutReviewInput
    upsert?: ReservationUpsertWithoutReviewInput
    connect?: ReservationWhereUniqueInput
    update?: XOR<XOR<ReservationUpdateToOneWithWhereWithoutReviewInput, ReservationUpdateWithoutReviewInput>, ReservationUncheckedUpdateWithoutReviewInput>
  }

  export type UserUpdateOneRequiredWithoutReviews_donneesNestedInput = {
    create?: XOR<UserCreateWithoutReviews_donneesInput, UserUncheckedCreateWithoutReviews_donneesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviews_donneesInput
    upsert?: UserUpsertWithoutReviews_donneesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviews_donneesInput, UserUpdateWithoutReviews_donneesInput>, UserUncheckedUpdateWithoutReviews_donneesInput>
  }

  export type UserUpdateOneRequiredWithoutReviews_recuesNestedInput = {
    create?: XOR<UserCreateWithoutReviews_recuesInput, UserUncheckedCreateWithoutReviews_recuesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviews_recuesInput
    upsert?: UserUpsertWithoutReviews_recuesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviews_recuesInput, UserUpdateWithoutReviews_recuesInput>, UserUncheckedUpdateWithoutReviews_recuesInput>
  }

  export type LieuUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<LieuCreateWithoutReviewsInput, LieuUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: LieuCreateOrConnectWithoutReviewsInput
    upsert?: LieuUpsertWithoutReviewsInput
    connect?: LieuWhereUniqueInput
    update?: XOR<XOR<LieuUpdateToOneWithWhereWithoutReviewsInput, LieuUpdateWithoutReviewsInput>, LieuUncheckedUpdateWithoutReviewsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumLieuTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LieuType | EnumLieuTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LieuType[] | ListEnumLieuTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LieuType[] | ListEnumLieuTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLieuTypeFilter<$PrismaModel> | $Enums.LieuType
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumLieuStatutFilter<$PrismaModel = never> = {
    equals?: $Enums.LieuStatut | EnumLieuStatutFieldRefInput<$PrismaModel>
    in?: $Enums.LieuStatut[] | ListEnumLieuStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.LieuStatut[] | ListEnumLieuStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumLieuStatutFilter<$PrismaModel> | $Enums.LieuStatut
  }

  export type NestedEnumLieuTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LieuType | EnumLieuTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LieuType[] | ListEnumLieuTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LieuType[] | ListEnumLieuTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLieuTypeWithAggregatesFilter<$PrismaModel> | $Enums.LieuType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLieuTypeFilter<$PrismaModel>
    _max?: NestedEnumLieuTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumLieuStatutWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LieuStatut | EnumLieuStatutFieldRefInput<$PrismaModel>
    in?: $Enums.LieuStatut[] | ListEnumLieuStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.LieuStatut[] | ListEnumLieuStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumLieuStatutWithAggregatesFilter<$PrismaModel> | $Enums.LieuStatut
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLieuStatutFilter<$PrismaModel>
    _max?: NestedEnumLieuStatutFilter<$PrismaModel>
  }

  export type NestedEnumReservationStatutFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatut | EnumReservationStatutFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatut[] | ListEnumReservationStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatut[] | ListEnumReservationStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatutFilter<$PrismaModel> | $Enums.ReservationStatut
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumReservationStatutWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatut | EnumReservationStatutFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatut[] | ListEnumReservationStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatut[] | ListEnumReservationStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatutWithAggregatesFilter<$PrismaModel> | $Enums.ReservationStatut
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReservationStatutFilter<$PrismaModel>
    _max?: NestedEnumReservationStatutFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumPaymentStatutFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatut | EnumPaymentStatutFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatut[] | ListEnumPaymentStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatut[] | ListEnumPaymentStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatutFilter<$PrismaModel> | $Enums.PaymentStatut
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatutWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatut | EnumPaymentStatutFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatut[] | ListEnumPaymentStatutFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatut[] | ListEnumPaymentStatutFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatutWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatut
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatutFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatutFilter<$PrismaModel>
  }

  export type LieuCreateWithoutProprietaireInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    reservations?: ReservationCreateNestedManyWithoutLieuInput
    reviews?: ReviewCreateNestedManyWithoutLieuInput
  }

  export type LieuUncheckedCreateWithoutProprietaireInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    reservations?: ReservationUncheckedCreateNestedManyWithoutLieuInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutLieuInput
  }

  export type LieuCreateOrConnectWithoutProprietaireInput = {
    where: LieuWhereUniqueInput
    create: XOR<LieuCreateWithoutProprietaireInput, LieuUncheckedCreateWithoutProprietaireInput>
  }

  export type LieuCreateManyProprietaireInputEnvelope = {
    data: LieuCreateManyProprietaireInput | LieuCreateManyProprietaireInput[]
    skipDuplicates?: boolean
  }

  export type ReservationCreateWithoutLocataireInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    lieu: LieuCreateNestedOneWithoutReservationsInput
    payments?: PaymentCreateNestedManyWithoutReservationInput
    review?: ReviewCreateNestedOneWithoutReservationInput
  }

  export type ReservationUncheckedCreateWithoutLocataireInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    lieu_id: string
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutReservationInput
    review?: ReviewUncheckedCreateNestedOneWithoutReservationInput
  }

  export type ReservationCreateOrConnectWithoutLocataireInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutLocataireInput, ReservationUncheckedCreateWithoutLocataireInput>
  }

  export type ReservationCreateManyLocataireInputEnvelope = {
    data: ReservationCreateManyLocataireInput | ReservationCreateManyLocataireInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutAuteurInput = {
    id?: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
    reservation: ReservationCreateNestedOneWithoutReviewInput
    target: UserCreateNestedOneWithoutReviews_recuesInput
    lieu: LieuCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutAuteurInput = {
    id?: string
    reservation_id: string
    target_id: string
    lieu_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type ReviewCreateOrConnectWithoutAuteurInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutAuteurInput, ReviewUncheckedCreateWithoutAuteurInput>
  }

  export type ReviewCreateManyAuteurInputEnvelope = {
    data: ReviewCreateManyAuteurInput | ReviewCreateManyAuteurInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutTargetInput = {
    id?: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
    reservation: ReservationCreateNestedOneWithoutReviewInput
    auteur: UserCreateNestedOneWithoutReviews_donneesInput
    lieu: LieuCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutTargetInput = {
    id?: string
    reservation_id: string
    auteur_id: string
    lieu_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type ReviewCreateOrConnectWithoutTargetInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput>
  }

  export type ReviewCreateManyTargetInputEnvelope = {
    data: ReviewCreateManyTargetInput | ReviewCreateManyTargetInput[]
    skipDuplicates?: boolean
  }

  export type LieuUpsertWithWhereUniqueWithoutProprietaireInput = {
    where: LieuWhereUniqueInput
    update: XOR<LieuUpdateWithoutProprietaireInput, LieuUncheckedUpdateWithoutProprietaireInput>
    create: XOR<LieuCreateWithoutProprietaireInput, LieuUncheckedCreateWithoutProprietaireInput>
  }

  export type LieuUpdateWithWhereUniqueWithoutProprietaireInput = {
    where: LieuWhereUniqueInput
    data: XOR<LieuUpdateWithoutProprietaireInput, LieuUncheckedUpdateWithoutProprietaireInput>
  }

  export type LieuUpdateManyWithWhereWithoutProprietaireInput = {
    where: LieuScalarWhereInput
    data: XOR<LieuUpdateManyMutationInput, LieuUncheckedUpdateManyWithoutProprietaireInput>
  }

  export type LieuScalarWhereInput = {
    AND?: LieuScalarWhereInput | LieuScalarWhereInput[]
    OR?: LieuScalarWhereInput[]
    NOT?: LieuScalarWhereInput | LieuScalarWhereInput[]
    id?: StringFilter<"Lieu"> | string
    titre?: StringFilter<"Lieu"> | string
    description?: StringFilter<"Lieu"> | string
    type?: EnumLieuTypeFilter<"Lieu"> | $Enums.LieuType
    adresse?: StringFilter<"Lieu"> | string
    ville?: StringFilter<"Lieu"> | string
    code_postal?: StringFilter<"Lieu"> | string
    latitude?: FloatFilter<"Lieu"> | number
    longitude?: FloatFilter<"Lieu"> | number
    superficie?: IntNullableFilter<"Lieu"> | number | null
    accessibilite?: StringNullableFilter<"Lieu"> | string | null
    equipements?: StringNullableListFilter<"Lieu">
    restrictions?: StringNullableFilter<"Lieu"> | string | null
    prix_jour?: FloatFilter<"Lieu"> | number
    caution?: FloatFilter<"Lieu"> | number
    disponible?: BoolFilter<"Lieu"> | boolean
    instant_book?: BoolFilter<"Lieu"> | boolean
    images?: StringNullableListFilter<"Lieu">
    video_url?: StringNullableFilter<"Lieu"> | string | null
    proprietaire_id?: StringFilter<"Lieu"> | string
    statut?: EnumLieuStatutFilter<"Lieu"> | $Enums.LieuStatut
    verified?: BoolFilter<"Lieu"> | boolean
    created_at?: DateTimeFilter<"Lieu"> | Date | string
    updated_at?: DateTimeFilter<"Lieu"> | Date | string
  }

  export type ReservationUpsertWithWhereUniqueWithoutLocataireInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutLocataireInput, ReservationUncheckedUpdateWithoutLocataireInput>
    create: XOR<ReservationCreateWithoutLocataireInput, ReservationUncheckedCreateWithoutLocataireInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutLocataireInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutLocataireInput, ReservationUncheckedUpdateWithoutLocataireInput>
  }

  export type ReservationUpdateManyWithWhereWithoutLocataireInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutLocataireInput>
  }

  export type ReservationScalarWhereInput = {
    AND?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    OR?: ReservationScalarWhereInput[]
    NOT?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    id?: StringFilter<"Reservation"> | string
    date_debut?: DateTimeFilter<"Reservation"> | Date | string
    date_fin?: DateTimeFilter<"Reservation"> | Date | string
    nb_jours?: IntFilter<"Reservation"> | number
    locataire_id?: StringFilter<"Reservation"> | string
    lieu_id?: StringFilter<"Reservation"> | string
    type_projet?: StringFilter<"Reservation"> | string
    nb_personnes?: IntFilter<"Reservation"> | number
    description?: StringNullableFilter<"Reservation"> | string | null
    equipements_demandes?: StringNullableListFilter<"Reservation">
    prix_total?: FloatFilter<"Reservation"> | number
    caution?: FloatFilter<"Reservation"> | number
    commission?: FloatFilter<"Reservation"> | number
    statut?: EnumReservationStatutFilter<"Reservation"> | $Enums.ReservationStatut
    created_at?: DateTimeFilter<"Reservation"> | Date | string
    updated_at?: DateTimeFilter<"Reservation"> | Date | string
    confirme_at?: DateTimeNullableFilter<"Reservation"> | Date | string | null
    annule_at?: DateTimeNullableFilter<"Reservation"> | Date | string | null
  }

  export type ReviewUpsertWithWhereUniqueWithoutAuteurInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutAuteurInput, ReviewUncheckedUpdateWithoutAuteurInput>
    create: XOR<ReviewCreateWithoutAuteurInput, ReviewUncheckedCreateWithoutAuteurInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutAuteurInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutAuteurInput, ReviewUncheckedUpdateWithoutAuteurInput>
  }

  export type ReviewUpdateManyWithWhereWithoutAuteurInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutAuteurInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    reservation_id?: StringFilter<"Review"> | string
    auteur_id?: StringFilter<"Review"> | string
    target_id?: StringFilter<"Review"> | string
    lieu_id?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    commentaire?: StringNullableFilter<"Review"> | string | null
    created_at?: DateTimeFilter<"Review"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutTargetInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutTargetInput, ReviewUncheckedUpdateWithoutTargetInput>
    create: XOR<ReviewCreateWithoutTargetInput, ReviewUncheckedCreateWithoutTargetInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutTargetInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutTargetInput, ReviewUncheckedUpdateWithoutTargetInput>
  }

  export type ReviewUpdateManyWithWhereWithoutTargetInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutTargetInput>
  }

  export type UserCreateWithoutLieuxInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    reservations?: ReservationCreateNestedManyWithoutLocataireInput
    reviews_donnees?: ReviewCreateNestedManyWithoutAuteurInput
    reviews_recues?: ReviewCreateNestedManyWithoutTargetInput
  }

  export type UserUncheckedCreateWithoutLieuxInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    reservations?: ReservationUncheckedCreateNestedManyWithoutLocataireInput
    reviews_donnees?: ReviewUncheckedCreateNestedManyWithoutAuteurInput
    reviews_recues?: ReviewUncheckedCreateNestedManyWithoutTargetInput
  }

  export type UserCreateOrConnectWithoutLieuxInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLieuxInput, UserUncheckedCreateWithoutLieuxInput>
  }

  export type ReservationCreateWithoutLieuInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    locataire: UserCreateNestedOneWithoutReservationsInput
    payments?: PaymentCreateNestedManyWithoutReservationInput
    review?: ReviewCreateNestedOneWithoutReservationInput
  }

  export type ReservationUncheckedCreateWithoutLieuInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    locataire_id: string
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutReservationInput
    review?: ReviewUncheckedCreateNestedOneWithoutReservationInput
  }

  export type ReservationCreateOrConnectWithoutLieuInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutLieuInput, ReservationUncheckedCreateWithoutLieuInput>
  }

  export type ReservationCreateManyLieuInputEnvelope = {
    data: ReservationCreateManyLieuInput | ReservationCreateManyLieuInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutLieuInput = {
    id?: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
    reservation: ReservationCreateNestedOneWithoutReviewInput
    auteur: UserCreateNestedOneWithoutReviews_donneesInput
    target: UserCreateNestedOneWithoutReviews_recuesInput
  }

  export type ReviewUncheckedCreateWithoutLieuInput = {
    id?: string
    reservation_id: string
    auteur_id: string
    target_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type ReviewCreateOrConnectWithoutLieuInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutLieuInput, ReviewUncheckedCreateWithoutLieuInput>
  }

  export type ReviewCreateManyLieuInputEnvelope = {
    data: ReviewCreateManyLieuInput | ReviewCreateManyLieuInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutLieuxInput = {
    update: XOR<UserUpdateWithoutLieuxInput, UserUncheckedUpdateWithoutLieuxInput>
    create: XOR<UserCreateWithoutLieuxInput, UserUncheckedCreateWithoutLieuxInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLieuxInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLieuxInput, UserUncheckedUpdateWithoutLieuxInput>
  }

  export type UserUpdateWithoutLieuxInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservations?: ReservationUpdateManyWithoutLocataireNestedInput
    reviews_donnees?: ReviewUpdateManyWithoutAuteurNestedInput
    reviews_recues?: ReviewUpdateManyWithoutTargetNestedInput
  }

  export type UserUncheckedUpdateWithoutLieuxInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservations?: ReservationUncheckedUpdateManyWithoutLocataireNestedInput
    reviews_donnees?: ReviewUncheckedUpdateManyWithoutAuteurNestedInput
    reviews_recues?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type ReservationUpsertWithWhereUniqueWithoutLieuInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutLieuInput, ReservationUncheckedUpdateWithoutLieuInput>
    create: XOR<ReservationCreateWithoutLieuInput, ReservationUncheckedCreateWithoutLieuInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutLieuInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutLieuInput, ReservationUncheckedUpdateWithoutLieuInput>
  }

  export type ReservationUpdateManyWithWhereWithoutLieuInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutLieuInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutLieuInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutLieuInput, ReviewUncheckedUpdateWithoutLieuInput>
    create: XOR<ReviewCreateWithoutLieuInput, ReviewUncheckedCreateWithoutLieuInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutLieuInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutLieuInput, ReviewUncheckedUpdateWithoutLieuInput>
  }

  export type ReviewUpdateManyWithWhereWithoutLieuInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutLieuInput>
  }

  export type UserCreateWithoutReservationsInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    lieux?: LieuCreateNestedManyWithoutProprietaireInput
    reviews_donnees?: ReviewCreateNestedManyWithoutAuteurInput
    reviews_recues?: ReviewCreateNestedManyWithoutTargetInput
  }

  export type UserUncheckedCreateWithoutReservationsInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    lieux?: LieuUncheckedCreateNestedManyWithoutProprietaireInput
    reviews_donnees?: ReviewUncheckedCreateNestedManyWithoutAuteurInput
    reviews_recues?: ReviewUncheckedCreateNestedManyWithoutTargetInput
  }

  export type UserCreateOrConnectWithoutReservationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
  }

  export type LieuCreateWithoutReservationsInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    proprietaire: UserCreateNestedOneWithoutLieuxInput
    reviews?: ReviewCreateNestedManyWithoutLieuInput
  }

  export type LieuUncheckedCreateWithoutReservationsInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    proprietaire_id: string
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    reviews?: ReviewUncheckedCreateNestedManyWithoutLieuInput
  }

  export type LieuCreateOrConnectWithoutReservationsInput = {
    where: LieuWhereUniqueInput
    create: XOR<LieuCreateWithoutReservationsInput, LieuUncheckedCreateWithoutReservationsInput>
  }

  export type PaymentCreateWithoutReservationInput = {
    id?: string
    amount: number
    commission: number
    type: $Enums.PaymentType
    stripe_payment_intent_id?: string | null
    stripe_transfer_id?: string | null
    statut?: $Enums.PaymentStatut
    created_at?: Date | string
    processed_at?: Date | string | null
  }

  export type PaymentUncheckedCreateWithoutReservationInput = {
    id?: string
    amount: number
    commission: number
    type: $Enums.PaymentType
    stripe_payment_intent_id?: string | null
    stripe_transfer_id?: string | null
    statut?: $Enums.PaymentStatut
    created_at?: Date | string
    processed_at?: Date | string | null
  }

  export type PaymentCreateOrConnectWithoutReservationInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput>
  }

  export type PaymentCreateManyReservationInputEnvelope = {
    data: PaymentCreateManyReservationInput | PaymentCreateManyReservationInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutReservationInput = {
    id?: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
    auteur: UserCreateNestedOneWithoutReviews_donneesInput
    target: UserCreateNestedOneWithoutReviews_recuesInput
    lieu: LieuCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutReservationInput = {
    id?: string
    auteur_id: string
    target_id: string
    lieu_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type ReviewCreateOrConnectWithoutReservationInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReservationInput, ReviewUncheckedCreateWithoutReservationInput>
  }

  export type UserUpsertWithoutReservationsInput = {
    update: XOR<UserUpdateWithoutReservationsInput, UserUncheckedUpdateWithoutReservationsInput>
    create: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReservationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReservationsInput, UserUncheckedUpdateWithoutReservationsInput>
  }

  export type UserUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lieux?: LieuUpdateManyWithoutProprietaireNestedInput
    reviews_donnees?: ReviewUpdateManyWithoutAuteurNestedInput
    reviews_recues?: ReviewUpdateManyWithoutTargetNestedInput
  }

  export type UserUncheckedUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lieux?: LieuUncheckedUpdateManyWithoutProprietaireNestedInput
    reviews_donnees?: ReviewUncheckedUpdateManyWithoutAuteurNestedInput
    reviews_recues?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type LieuUpsertWithoutReservationsInput = {
    update: XOR<LieuUpdateWithoutReservationsInput, LieuUncheckedUpdateWithoutReservationsInput>
    create: XOR<LieuCreateWithoutReservationsInput, LieuUncheckedCreateWithoutReservationsInput>
    where?: LieuWhereInput
  }

  export type LieuUpdateToOneWithWhereWithoutReservationsInput = {
    where?: LieuWhereInput
    data: XOR<LieuUpdateWithoutReservationsInput, LieuUncheckedUpdateWithoutReservationsInput>
  }

  export type LieuUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    proprietaire?: UserUpdateOneRequiredWithoutLieuxNestedInput
    reviews?: ReviewUpdateManyWithoutLieuNestedInput
  }

  export type LieuUncheckedUpdateWithoutReservationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    proprietaire_id?: StringFieldUpdateOperationsInput | string
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewUncheckedUpdateManyWithoutLieuNestedInput
  }

  export type PaymentUpsertWithWhereUniqueWithoutReservationInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutReservationInput, PaymentUncheckedUpdateWithoutReservationInput>
    create: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutReservationInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutReservationInput, PaymentUncheckedUpdateWithoutReservationInput>
  }

  export type PaymentUpdateManyWithWhereWithoutReservationInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutReservationInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    reservation_id?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    commission?: FloatFilter<"Payment"> | number
    type?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
    stripe_payment_intent_id?: StringNullableFilter<"Payment"> | string | null
    stripe_transfer_id?: StringNullableFilter<"Payment"> | string | null
    statut?: EnumPaymentStatutFilter<"Payment"> | $Enums.PaymentStatut
    created_at?: DateTimeFilter<"Payment"> | Date | string
    processed_at?: DateTimeNullableFilter<"Payment"> | Date | string | null
  }

  export type ReviewUpsertWithoutReservationInput = {
    update: XOR<ReviewUpdateWithoutReservationInput, ReviewUncheckedUpdateWithoutReservationInput>
    create: XOR<ReviewCreateWithoutReservationInput, ReviewUncheckedCreateWithoutReservationInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReservationInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReservationInput, ReviewUncheckedUpdateWithoutReservationInput>
  }

  export type ReviewUpdateWithoutReservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    auteur?: UserUpdateOneRequiredWithoutReviews_donneesNestedInput
    target?: UserUpdateOneRequiredWithoutReviews_recuesNestedInput
    lieu?: LieuUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    auteur_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationCreateWithoutPaymentsInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    locataire: UserCreateNestedOneWithoutReservationsInput
    lieu: LieuCreateNestedOneWithoutReservationsInput
    review?: ReviewCreateNestedOneWithoutReservationInput
  }

  export type ReservationUncheckedCreateWithoutPaymentsInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    locataire_id: string
    lieu_id: string
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    review?: ReviewUncheckedCreateNestedOneWithoutReservationInput
  }

  export type ReservationCreateOrConnectWithoutPaymentsInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutPaymentsInput, ReservationUncheckedCreateWithoutPaymentsInput>
  }

  export type ReservationUpsertWithoutPaymentsInput = {
    update: XOR<ReservationUpdateWithoutPaymentsInput, ReservationUncheckedUpdateWithoutPaymentsInput>
    create: XOR<ReservationCreateWithoutPaymentsInput, ReservationUncheckedCreateWithoutPaymentsInput>
    where?: ReservationWhereInput
  }

  export type ReservationUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: ReservationWhereInput
    data: XOR<ReservationUpdateWithoutPaymentsInput, ReservationUncheckedUpdateWithoutPaymentsInput>
  }

  export type ReservationUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locataire?: UserUpdateOneRequiredWithoutReservationsNestedInput
    lieu?: LieuUpdateOneRequiredWithoutReservationsNestedInput
    review?: ReviewUpdateOneWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    locataire_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    review?: ReviewUncheckedUpdateOneWithoutReservationNestedInput
  }

  export type ReservationCreateWithoutReviewInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    locataire: UserCreateNestedOneWithoutReservationsInput
    lieu: LieuCreateNestedOneWithoutReservationsInput
    payments?: PaymentCreateNestedManyWithoutReservationInput
  }

  export type ReservationUncheckedCreateWithoutReviewInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    locataire_id: string
    lieu_id: string
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutReservationInput
  }

  export type ReservationCreateOrConnectWithoutReviewInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutReviewInput, ReservationUncheckedCreateWithoutReviewInput>
  }

  export type UserCreateWithoutReviews_donneesInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    lieux?: LieuCreateNestedManyWithoutProprietaireInput
    reservations?: ReservationCreateNestedManyWithoutLocataireInput
    reviews_recues?: ReviewCreateNestedManyWithoutTargetInput
  }

  export type UserUncheckedCreateWithoutReviews_donneesInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    lieux?: LieuUncheckedCreateNestedManyWithoutProprietaireInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutLocataireInput
    reviews_recues?: ReviewUncheckedCreateNestedManyWithoutTargetInput
  }

  export type UserCreateOrConnectWithoutReviews_donneesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviews_donneesInput, UserUncheckedCreateWithoutReviews_donneesInput>
  }

  export type UserCreateWithoutReviews_recuesInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    lieux?: LieuCreateNestedManyWithoutProprietaireInput
    reservations?: ReservationCreateNestedManyWithoutLocataireInput
    reviews_donnees?: ReviewCreateNestedManyWithoutAuteurInput
  }

  export type UserUncheckedCreateWithoutReviews_recuesInput = {
    id?: string
    email: string
    password: string
    nom: string
    prenom: string
    telephone?: string | null
    role?: $Enums.UserRole
    verified?: boolean
    active?: boolean
    stripe_customer_id?: string | null
    premium_until?: Date | string | null
    created_at?: Date | string
    updated_at?: Date | string
    lieux?: LieuUncheckedCreateNestedManyWithoutProprietaireInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutLocataireInput
    reviews_donnees?: ReviewUncheckedCreateNestedManyWithoutAuteurInput
  }

  export type UserCreateOrConnectWithoutReviews_recuesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviews_recuesInput, UserUncheckedCreateWithoutReviews_recuesInput>
  }

  export type LieuCreateWithoutReviewsInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    proprietaire: UserCreateNestedOneWithoutLieuxInput
    reservations?: ReservationCreateNestedManyWithoutLieuInput
  }

  export type LieuUncheckedCreateWithoutReviewsInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    proprietaire_id: string
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    reservations?: ReservationUncheckedCreateNestedManyWithoutLieuInput
  }

  export type LieuCreateOrConnectWithoutReviewsInput = {
    where: LieuWhereUniqueInput
    create: XOR<LieuCreateWithoutReviewsInput, LieuUncheckedCreateWithoutReviewsInput>
  }

  export type ReservationUpsertWithoutReviewInput = {
    update: XOR<ReservationUpdateWithoutReviewInput, ReservationUncheckedUpdateWithoutReviewInput>
    create: XOR<ReservationCreateWithoutReviewInput, ReservationUncheckedCreateWithoutReviewInput>
    where?: ReservationWhereInput
  }

  export type ReservationUpdateToOneWithWhereWithoutReviewInput = {
    where?: ReservationWhereInput
    data: XOR<ReservationUpdateWithoutReviewInput, ReservationUncheckedUpdateWithoutReviewInput>
  }

  export type ReservationUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locataire?: UserUpdateOneRequiredWithoutReservationsNestedInput
    lieu?: LieuUpdateOneRequiredWithoutReservationsNestedInput
    payments?: PaymentUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    locataire_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type UserUpsertWithoutReviews_donneesInput = {
    update: XOR<UserUpdateWithoutReviews_donneesInput, UserUncheckedUpdateWithoutReviews_donneesInput>
    create: XOR<UserCreateWithoutReviews_donneesInput, UserUncheckedCreateWithoutReviews_donneesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviews_donneesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviews_donneesInput, UserUncheckedUpdateWithoutReviews_donneesInput>
  }

  export type UserUpdateWithoutReviews_donneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lieux?: LieuUpdateManyWithoutProprietaireNestedInput
    reservations?: ReservationUpdateManyWithoutLocataireNestedInput
    reviews_recues?: ReviewUpdateManyWithoutTargetNestedInput
  }

  export type UserUncheckedUpdateWithoutReviews_donneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lieux?: LieuUncheckedUpdateManyWithoutProprietaireNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutLocataireNestedInput
    reviews_recues?: ReviewUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type UserUpsertWithoutReviews_recuesInput = {
    update: XOR<UserUpdateWithoutReviews_recuesInput, UserUncheckedUpdateWithoutReviews_recuesInput>
    create: XOR<UserCreateWithoutReviews_recuesInput, UserUncheckedCreateWithoutReviews_recuesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviews_recuesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviews_recuesInput, UserUncheckedUpdateWithoutReviews_recuesInput>
  }

  export type UserUpdateWithoutReviews_recuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lieux?: LieuUpdateManyWithoutProprietaireNestedInput
    reservations?: ReservationUpdateManyWithoutLocataireNestedInput
    reviews_donnees?: ReviewUpdateManyWithoutAuteurNestedInput
  }

  export type UserUncheckedUpdateWithoutReviews_recuesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    verified?: BoolFieldUpdateOperationsInput | boolean
    active?: BoolFieldUpdateOperationsInput | boolean
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    premium_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lieux?: LieuUncheckedUpdateManyWithoutProprietaireNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutLocataireNestedInput
    reviews_donnees?: ReviewUncheckedUpdateManyWithoutAuteurNestedInput
  }

  export type LieuUpsertWithoutReviewsInput = {
    update: XOR<LieuUpdateWithoutReviewsInput, LieuUncheckedUpdateWithoutReviewsInput>
    create: XOR<LieuCreateWithoutReviewsInput, LieuUncheckedCreateWithoutReviewsInput>
    where?: LieuWhereInput
  }

  export type LieuUpdateToOneWithWhereWithoutReviewsInput = {
    where?: LieuWhereInput
    data: XOR<LieuUpdateWithoutReviewsInput, LieuUncheckedUpdateWithoutReviewsInput>
  }

  export type LieuUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    proprietaire?: UserUpdateOneRequiredWithoutLieuxNestedInput
    reservations?: ReservationUpdateManyWithoutLieuNestedInput
  }

  export type LieuUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    proprietaire_id?: StringFieldUpdateOperationsInput | string
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservations?: ReservationUncheckedUpdateManyWithoutLieuNestedInput
  }

  export type LieuCreateManyProprietaireInput = {
    id?: string
    titre: string
    description: string
    type: $Enums.LieuType
    adresse: string
    ville: string
    code_postal: string
    latitude: number
    longitude: number
    superficie?: number | null
    accessibilite?: string | null
    equipements?: LieuCreateequipementsInput | string[]
    restrictions?: string | null
    prix_jour: number
    caution?: number
    disponible?: boolean
    instant_book?: boolean
    images?: LieuCreateimagesInput | string[]
    video_url?: string | null
    statut?: $Enums.LieuStatut
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReservationCreateManyLocataireInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    lieu_id: string
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
  }

  export type ReviewCreateManyAuteurInput = {
    id?: string
    reservation_id: string
    target_id: string
    lieu_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type ReviewCreateManyTargetInput = {
    id?: string
    reservation_id: string
    auteur_id: string
    lieu_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type LieuUpdateWithoutProprietaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservations?: ReservationUpdateManyWithoutLieuNestedInput
    reviews?: ReviewUpdateManyWithoutLieuNestedInput
  }

  export type LieuUncheckedUpdateWithoutProprietaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservations?: ReservationUncheckedUpdateManyWithoutLieuNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutLieuNestedInput
  }

  export type LieuUncheckedUpdateManyWithoutProprietaireInput = {
    id?: StringFieldUpdateOperationsInput | string
    titre?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumLieuTypeFieldUpdateOperationsInput | $Enums.LieuType
    adresse?: StringFieldUpdateOperationsInput | string
    ville?: StringFieldUpdateOperationsInput | string
    code_postal?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    superficie?: NullableIntFieldUpdateOperationsInput | number | null
    accessibilite?: NullableStringFieldUpdateOperationsInput | string | null
    equipements?: LieuUpdateequipementsInput | string[]
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    prix_jour?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    disponible?: BoolFieldUpdateOperationsInput | boolean
    instant_book?: BoolFieldUpdateOperationsInput | boolean
    images?: LieuUpdateimagesInput | string[]
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumLieuStatutFieldUpdateOperationsInput | $Enums.LieuStatut
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUpdateWithoutLocataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lieu?: LieuUpdateOneRequiredWithoutReservationsNestedInput
    payments?: PaymentUpdateManyWithoutReservationNestedInput
    review?: ReviewUpdateOneWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateWithoutLocataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    lieu_id?: StringFieldUpdateOperationsInput | string
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutReservationNestedInput
    review?: ReviewUncheckedUpdateOneWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateManyWithoutLocataireInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    lieu_id?: StringFieldUpdateOperationsInput | string
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewUpdateWithoutAuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: ReservationUpdateOneRequiredWithoutReviewNestedInput
    target?: UserUpdateOneRequiredWithoutReviews_recuesNestedInput
    lieu?: LieuUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutAuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutAuteurInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: ReservationUpdateOneRequiredWithoutReviewNestedInput
    auteur?: UserUpdateOneRequiredWithoutReviews_donneesNestedInput
    lieu?: LieuUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    auteur_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    auteur_id?: StringFieldUpdateOperationsInput | string
    lieu_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationCreateManyLieuInput = {
    id?: string
    date_debut: Date | string
    date_fin: Date | string
    nb_jours: number
    locataire_id: string
    type_projet: string
    nb_personnes: number
    description?: string | null
    equipements_demandes?: ReservationCreateequipements_demandesInput | string[]
    prix_total: number
    caution: number
    commission: number
    statut?: $Enums.ReservationStatut
    created_at?: Date | string
    updated_at?: Date | string
    confirme_at?: Date | string | null
    annule_at?: Date | string | null
  }

  export type ReviewCreateManyLieuInput = {
    id?: string
    reservation_id: string
    auteur_id: string
    target_id: string
    rating: number
    commentaire?: string | null
    created_at?: Date | string
  }

  export type ReservationUpdateWithoutLieuInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locataire?: UserUpdateOneRequiredWithoutReservationsNestedInput
    payments?: PaymentUpdateManyWithoutReservationNestedInput
    review?: ReviewUpdateOneWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateWithoutLieuInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    locataire_id?: StringFieldUpdateOperationsInput | string
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutReservationNestedInput
    review?: ReviewUncheckedUpdateOneWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateManyWithoutLieuInput = {
    id?: StringFieldUpdateOperationsInput | string
    date_debut?: DateTimeFieldUpdateOperationsInput | Date | string
    date_fin?: DateTimeFieldUpdateOperationsInput | Date | string
    nb_jours?: IntFieldUpdateOperationsInput | number
    locataire_id?: StringFieldUpdateOperationsInput | string
    type_projet?: StringFieldUpdateOperationsInput | string
    nb_personnes?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipements_demandes?: ReservationUpdateequipements_demandesInput | string[]
    prix_total?: FloatFieldUpdateOperationsInput | number
    caution?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    statut?: EnumReservationStatutFieldUpdateOperationsInput | $Enums.ReservationStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    confirme_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    annule_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewUpdateWithoutLieuInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: ReservationUpdateOneRequiredWithoutReviewNestedInput
    auteur?: UserUpdateOneRequiredWithoutReviews_donneesNestedInput
    target?: UserUpdateOneRequiredWithoutReviews_recuesNestedInput
  }

  export type ReviewUncheckedUpdateWithoutLieuInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    auteur_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutLieuInput = {
    id?: StringFieldUpdateOperationsInput | string
    reservation_id?: StringFieldUpdateOperationsInput | string
    auteur_id?: StringFieldUpdateOperationsInput | string
    target_id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    commentaire?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyReservationInput = {
    id?: string
    amount: number
    commission: number
    type: $Enums.PaymentType
    stripe_payment_intent_id?: string | null
    stripe_transfer_id?: string | null
    statut?: $Enums.PaymentStatut
    created_at?: Date | string
    processed_at?: Date | string | null
  }

  export type PaymentUpdateWithoutReservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    stripe_payment_intent_id?: NullableStringFieldUpdateOperationsInput | string | null
    stripe_transfer_id?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumPaymentStatutFieldUpdateOperationsInput | $Enums.PaymentStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUncheckedUpdateWithoutReservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    stripe_payment_intent_id?: NullableStringFieldUpdateOperationsInput | string | null
    stripe_transfer_id?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumPaymentStatutFieldUpdateOperationsInput | $Enums.PaymentStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUncheckedUpdateManyWithoutReservationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    commission?: FloatFieldUpdateOperationsInput | number
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    stripe_payment_intent_id?: NullableStringFieldUpdateOperationsInput | string | null
    stripe_transfer_id?: NullableStringFieldUpdateOperationsInput | string | null
    statut?: EnumPaymentStatutFieldUpdateOperationsInput | $Enums.PaymentStatut
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    processed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}